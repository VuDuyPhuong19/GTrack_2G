
GTrackTest_vdp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d8  080030d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030d8  080030d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030d8  080030d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080030ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080030ec  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000080d8  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001673  00000000  00000000  0002814f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000658  00000000  00000000  000297c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e1  00000000  00000000  00029e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000101aa  00000000  00000000  0002a301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009017  00000000  00000000  0003a4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00062e30  00000000  00000000  000434c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001520  00000000  00000000  000a62f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000a7814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003068 	.word	0x08003068

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003068 	.word	0x08003068

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
uint8_t  rx_buffer[100]; 
int rx_Index=0;
uint8_t  rx_Data;

int main(void)
{
 800021c:	b5b0      	push	{r4, r5, r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fb1f 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f8c9 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f97f 	bl	800052c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800022e:	f000 f91d 	bl	800046c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000232:	f000 f94b 	bl	80004cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, pb12_Pin, 0);
 8000236:	2380      	movs	r3, #128	; 0x80
 8000238:	015b      	lsls	r3, r3, #5
 800023a:	4849      	ldr	r0, [pc, #292]	; (8000360 <main+0x144>)
 800023c:	2200      	movs	r2, #0
 800023e:	0019      	movs	r1, r3
 8000240:	f000 fe81 	bl	8000f46 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000244:	20c8      	movs	r0, #200	; 0xc8
 8000246:	f000 fb71 	bl	800092c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, pb14_Pin, 1);	
 800024a:	2380      	movs	r3, #128	; 0x80
 800024c:	01db      	lsls	r3, r3, #7
 800024e:	4844      	ldr	r0, [pc, #272]	; (8000360 <main+0x144>)
 8000250:	2201      	movs	r2, #1
 8000252:	0019      	movs	r1, r3
 8000254:	f000 fe77 	bl	8000f46 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8000258:	4b42      	ldr	r3, [pc, #264]	; (8000364 <main+0x148>)
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fb66 	bl	800092c <HAL_Delay>
	//HAL_GPIO_WritePin(GPIOB, pb14_Pin, 0);
	HAL_GPIO_WritePin(GPIOB, pb13_Pin, 0);
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	019b      	lsls	r3, r3, #6
 8000264:	483e      	ldr	r0, [pc, #248]	; (8000360 <main+0x144>)
 8000266:	2200      	movs	r2, #0
 8000268:	0019      	movs	r1, r3
 800026a:	f000 fe6c 	bl	8000f46 <HAL_GPIO_WritePin>

	uint8_t tx_buffer_0[] = "AT+QGNSSC=1\r\n";
 800026e:	2310      	movs	r3, #16
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	4a3d      	ldr	r2, [pc, #244]	; (8000368 <main+0x14c>)
 8000274:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000276:	c313      	stmia	r3!, {r0, r1, r4}
 8000278:	8812      	ldrh	r2, [r2, #0]
 800027a:	801a      	strh	r2, [r3, #0]
	uint8_t tx_buffer_1[] = "AT+QGNSSRD?\r\n";
 800027c:	003b      	movs	r3, r7
 800027e:	4a3b      	ldr	r2, [pc, #236]	; (800036c <main+0x150>)
 8000280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000282:	c313      	stmia	r3!, {r0, r1, r4}
 8000284:	8812      	ldrh	r2, [r2, #0]
 8000286:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_UART_Transmit_IT(&huart3,(uint8_t*)tx_buffer_0, sizeof(tx_buffer_0));
 8000288:	2310      	movs	r3, #16
 800028a:	18f9      	adds	r1, r7, r3
 800028c:	4b38      	ldr	r3, [pc, #224]	; (8000370 <main+0x154>)
 800028e:	220e      	movs	r2, #14
 8000290:	0018      	movs	r0, r3
 8000292:	f001 fbfb 	bl	8001a8c <HAL_UART_Transmit_IT>
		HAL_Delay(200);
 8000296:	20c8      	movs	r0, #200	; 0xc8
 8000298:	f000 fb48 	bl	800092c <HAL_Delay>
		HAL_UART_Receive_IT(&huart3,(uint8_t *)rx_buffer,sizeof(rx_buffer));
 800029c:	4935      	ldr	r1, [pc, #212]	; (8000374 <main+0x158>)
 800029e:	4b34      	ldr	r3, [pc, #208]	; (8000370 <main+0x154>)
 80002a0:	2264      	movs	r2, #100	; 0x64
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fc62 	bl	8001b6c <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart3,(uint8_t*)tx_buffer_1, sizeof(tx_buffer_1));
 80002a8:	0039      	movs	r1, r7
 80002aa:	4b31      	ldr	r3, [pc, #196]	; (8000370 <main+0x154>)
 80002ac:	220e      	movs	r2, #14
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 fbec 	bl	8001a8c <HAL_UART_Transmit_IT>
		HAL_Delay(200);
 80002b4:	20c8      	movs	r0, #200	; 0xc8
 80002b6:	f000 fb39 	bl	800092c <HAL_Delay>
		HAL_UART_Receive_IT(&huart3,(uint8_t *)rx_buffer,sizeof(rx_buffer));
 80002ba:	492e      	ldr	r1, [pc, #184]	; (8000374 <main+0x158>)
 80002bc:	4b2c      	ldr	r3, [pc, #176]	; (8000370 <main+0x154>)
 80002be:	2264      	movs	r2, #100	; 0x64
 80002c0:	0018      	movs	r0, r3
 80002c2:	f001 fc53 	bl	8001b6c <HAL_UART_Receive_IT>
		/*HAL_UART_Transmit_IT(&huart3,(uint8_t*)tx_buffer_2, sizeof(tx_buffer_2));
		HAL_Delay(200);
		HAL_UART_Receive_IT(&huart3,(uint8_t *)rx_buffer,1);
		*/
		
		uint8_t read = HAL_GPIO_ReadPin(GPIOB, pb15_Pin);
 80002c6:	251f      	movs	r5, #31
 80002c8:	197c      	adds	r4, r7, r5
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	021b      	lsls	r3, r3, #8
 80002ce:	4a24      	ldr	r2, [pc, #144]	; (8000360 <main+0x144>)
 80002d0:	0019      	movs	r1, r3
 80002d2:	0010      	movs	r0, r2
 80002d4:	f000 fe1a 	bl	8000f0c <HAL_GPIO_ReadPin>
 80002d8:	0003      	movs	r3, r0
 80002da:	7023      	strb	r3, [r4, #0]
		if (read == 0){
 80002dc:	197b      	adds	r3, r7, r5
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d116      	bne.n	8000312 <main+0xf6>
			HAL_GPIO_WritePin(GPIOA, pa11_Pin, 0);
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	0119      	lsls	r1, r3, #4
 80002e8:	2390      	movs	r3, #144	; 0x90
 80002ea:	05db      	lsls	r3, r3, #23
 80002ec:	2200      	movs	r2, #0
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 fe29 	bl	8000f46 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80002f4:	20c8      	movs	r0, #200	; 0xc8
 80002f6:	f000 fb19 	bl	800092c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, pa11_Pin, 1);
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	0119      	lsls	r1, r3, #4
 80002fe:	2390      	movs	r3, #144	; 0x90
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	2201      	movs	r2, #1
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fe1e 	bl	8000f46 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800030a:	20c8      	movs	r0, #200	; 0xc8
 800030c:	f000 fb0e 	bl	800092c <HAL_Delay>
 8000310:	e020      	b.n	8000354 <main+0x138>
		}
		else if (read == 1){
 8000312:	231f      	movs	r3, #31
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d11b      	bne.n	8000354 <main+0x138>
		  HAL_GPIO_WritePin(GPIOA, pa12_Pin, 0);
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	0159      	lsls	r1, r3, #5
 8000320:	2390      	movs	r3, #144	; 0x90
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2200      	movs	r2, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f000 fe0d 	bl	8000f46 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800032c:	20c8      	movs	r0, #200	; 0xc8
 800032e:	f000 fafd 	bl	800092c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, pa12_Pin, 1);
 8000332:	2380      	movs	r3, #128	; 0x80
 8000334:	0159      	lsls	r1, r3, #5
 8000336:	2390      	movs	r3, #144	; 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	2201      	movs	r2, #1
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fe02 	bl	8000f46 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000342:	20c8      	movs	r0, #200	; 0xc8
 8000344:	f000 faf2 	bl	800092c <HAL_Delay>
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)rx_buffer, sizeof(rx_buffer));
 8000348:	490a      	ldr	r1, [pc, #40]	; (8000374 <main+0x158>)
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <main+0x15c>)
 800034c:	2264      	movs	r2, #100	; 0x64
 800034e:	0018      	movs	r0, r3
 8000350:	f001 fb9c 	bl	8001a8c <HAL_UART_Transmit_IT>
		}

		HAL_Delay(1000);
 8000354:	23fa      	movs	r3, #250	; 0xfa
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	0018      	movs	r0, r3
 800035a:	f000 fae7 	bl	800092c <HAL_Delay>
  {
 800035e:	e793      	b.n	8000288 <main+0x6c>
 8000360:	48000400 	.word	0x48000400
 8000364:	00001388 	.word	0x00001388
 8000368:	08003080 	.word	0x08003080
 800036c:	08003090 	.word	0x08003090
 8000370:	200000b0 	.word	0x200000b0
 8000374:	20000138 	.word	0x20000138
 8000378:	20000028 	.word	0x20000028

0800037c <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END 3 */
}

// UART Receive Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
		uint8_t received_data;
		received_data = huart->Instance->RDR;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2da      	uxtb	r2, r3
 800038e:	210f      	movs	r1, #15
 8000390:	187b      	adds	r3, r7, r1
 8000392:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, &received_data, 1);
 8000394:	1879      	adds	r1, r7, r1
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <HAL_UART_RxCpltCallback+0x3c>)
 8000398:	2201      	movs	r2, #1
 800039a:	0018      	movs	r0, r3
 800039c:	f001 fb76 	bl	8001a8c <HAL_UART_Transmit_IT>
		HAL_GPIO_WritePin(GPIOA, pa11_Pin, 1);
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	0119      	lsls	r1, r3, #4
 80003a4:	2390      	movs	r3, #144	; 0x90
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	2201      	movs	r2, #1
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fdcb 	bl	8000f46 <HAL_GPIO_WritePin>
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b004      	add	sp, #16
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b095      	sub	sp, #84	; 0x54
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	2420      	movs	r4, #32
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	0018      	movs	r0, r3
 80003c8:	2330      	movs	r3, #48	; 0x30
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 fe1f 	bl	8003010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d2:	2310      	movs	r3, #16
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fe17 	bl	8003010 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e2:	003b      	movs	r3, r7
 80003e4:	0018      	movs	r0, r3
 80003e6:	2310      	movs	r3, #16
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f002 fe10 	bl	8003010 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f0:	0021      	movs	r1, r4
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2202      	movs	r2, #2
 80003f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2201      	movs	r2, #1
 80003fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2210      	movs	r2, #16
 8000402:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	187b      	adds	r3, r7, r1
 800040c:	0018      	movs	r0, r3
 800040e:	f000 fdb7 	bl	8000f80 <HAL_RCC_OscConfig>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000416:	f000 f901 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041a:	2110      	movs	r1, #16
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2207      	movs	r2, #7
 8000420:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042e:	187b      	adds	r3, r7, r1
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000434:	187b      	adds	r3, r7, r1
 8000436:	2100      	movs	r1, #0
 8000438:	0018      	movs	r0, r3
 800043a:	f001 f8bf 	bl	80015bc <HAL_RCC_ClockConfig>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000442:	f000 f8eb 	bl	800061c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000446:	003b      	movs	r3, r7
 8000448:	2201      	movs	r2, #1
 800044a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800044c:	003b      	movs	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	f001 f9f7 	bl	8001848 <HAL_RCCEx_PeriphCLKConfig>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800045e:	f000 f8dd 	bl	800061c <Error_Handler>
  }
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b015      	add	sp, #84	; 0x54
 8000468:	bd90      	pop	{r4, r7, pc}
	...

0800046c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 8000472:	4a15      	ldr	r2, [pc, #84]	; (80004c8 <MX_USART1_UART_Init+0x5c>)
 8000474:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000476:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 8000478:	22e1      	movs	r2, #225	; 0xe1
 800047a:	0252      	lsls	r2, r2, #9
 800047c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 8000492:	220c      	movs	r2, #12
 8000494:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <MX_USART1_UART_Init+0x58>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fa97 	bl	80019e4 <HAL_UART_Init>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004ba:	f000 f8af 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000028 	.word	0x20000028
 80004c8:	40013800 	.word	0x40013800

080004cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_USART3_UART_Init+0x58>)
 80004d2:	4a15      	ldr	r2, [pc, #84]	; (8000528 <MX_USART3_UART_Init+0x5c>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_USART3_UART_Init+0x58>)
 80004d8:	22e1      	movs	r2, #225	; 0xe1
 80004da:	0252      	lsls	r2, r2, #9
 80004dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_USART3_UART_Init+0x58>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_USART3_UART_Init+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_USART3_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_USART3_UART_Init+0x58>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_USART3_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_USART3_UART_Init+0x58>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_USART3_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_USART3_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_USART3_UART_Init+0x58>)
 8000510:	0018      	movs	r0, r3
 8000512:	f001 fa67 	bl	80019e4 <HAL_UART_Init>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800051a:	f000 f87f 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000b0 	.word	0x200000b0
 8000528:	40004800 	.word	0x40004800

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b089      	sub	sp, #36	; 0x24
 8000530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	240c      	movs	r4, #12
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	2314      	movs	r3, #20
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 fd67 	bl	8003010 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b34      	ldr	r3, [pc, #208]	; (8000614 <MX_GPIO_Init+0xe8>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b33      	ldr	r3, [pc, #204]	; (8000614 <MX_GPIO_Init+0xe8>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	02c9      	lsls	r1, r1, #11
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <MX_GPIO_Init+0xe8>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	02db      	lsls	r3, r3, #11
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <MX_GPIO_Init+0xe8>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <MX_GPIO_Init+0xe8>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0289      	lsls	r1, r1, #10
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b29      	ldr	r3, [pc, #164]	; (8000614 <MX_GPIO_Init+0xe8>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pb12_Pin|pb13_Pin|pb14_Pin, GPIO_PIN_RESET);
 800057a:	23e0      	movs	r3, #224	; 0xe0
 800057c:	01db      	lsls	r3, r3, #7
 800057e:	4826      	ldr	r0, [pc, #152]	; (8000618 <MX_GPIO_Init+0xec>)
 8000580:	2200      	movs	r2, #0
 8000582:	0019      	movs	r1, r3
 8000584:	f000 fcdf 	bl	8000f46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, pa11_Pin|pa12_Pin, GPIO_PIN_RESET);
 8000588:	23c0      	movs	r3, #192	; 0xc0
 800058a:	0159      	lsls	r1, r3, #5
 800058c:	2390      	movs	r3, #144	; 0x90
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2200      	movs	r2, #0
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fcd7 	bl	8000f46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : pb12_Pin pb13_Pin pb14_Pin */
  GPIO_InitStruct.Pin = pb12_Pin|pb13_Pin|pb14_Pin;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	22e0      	movs	r2, #224	; 0xe0
 800059c:	01d2      	lsls	r2, r2, #7
 800059e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2201      	movs	r2, #1
 80005a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	4a18      	ldr	r2, [pc, #96]	; (8000618 <MX_GPIO_Init+0xec>)
 80005b6:	0019      	movs	r1, r3
 80005b8:	0010      	movs	r0, r2
 80005ba:	f000 fb37 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : pb15_Pin */
  GPIO_InitStruct.Pin = pb15_Pin;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	0212      	lsls	r2, r2, #8
 80005c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	000c      	movs	r4, r1
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(pb15_GPIO_Port, &GPIO_InitStruct);
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <MX_GPIO_Init+0xec>)
 80005da:	0019      	movs	r1, r3
 80005dc:	0010      	movs	r0, r2
 80005de:	f000 fb25 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : pa11_Pin pa12_Pin */
  GPIO_InitStruct.Pin = pa11_Pin|pa12_Pin;
 80005e2:	0021      	movs	r1, r4
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	22c0      	movs	r2, #192	; 0xc0
 80005e8:	0152      	lsls	r2, r2, #5
 80005ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fb10 	bl	8000c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b009      	add	sp, #36	; 0x24
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000400 	.word	0x48000400

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x44>)
 8000630:	699a      	ldr	r2, [r3, #24]
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <HAL_MspInit+0x44>)
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	619a      	str	r2, [r3, #24]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x44>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	2201      	movs	r2, #1
 8000640:	4013      	ands	r3, r2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x44>)
 8000648:	69da      	ldr	r2, [r3, #28]
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_MspInit+0x44>)
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	0549      	lsls	r1, r1, #21
 8000650:	430a      	orrs	r2, r1
 8000652:	61da      	str	r2, [r3, #28]
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_MspInit+0x44>)
 8000656:	69da      	ldr	r2, [r3, #28]
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	055b      	lsls	r3, r3, #21
 800065c:	4013      	ands	r3, r2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b08d      	sub	sp, #52	; 0x34
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	241c      	movs	r4, #28
 800067a:	193b      	adds	r3, r7, r4
 800067c:	0018      	movs	r0, r3
 800067e:	2314      	movs	r3, #20
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f002 fcc4 	bl	8003010 <memset>
  if(huart->Instance==USART1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a41      	ldr	r2, [pc, #260]	; (8000794 <HAL_UART_MspInit+0x124>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d13c      	bne.n	800070c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000692:	4b41      	ldr	r3, [pc, #260]	; (8000798 <HAL_UART_MspInit+0x128>)
 8000694:	699a      	ldr	r2, [r3, #24]
 8000696:	4b40      	ldr	r3, [pc, #256]	; (8000798 <HAL_UART_MspInit+0x128>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	01c9      	lsls	r1, r1, #7
 800069c:	430a      	orrs	r2, r1
 800069e:	619a      	str	r2, [r3, #24]
 80006a0:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <HAL_UART_MspInit+0x128>)
 80006a2:	699a      	ldr	r2, [r3, #24]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	01db      	lsls	r3, r3, #7
 80006a8:	4013      	ands	r3, r2
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b3a      	ldr	r3, [pc, #232]	; (8000798 <HAL_UART_MspInit+0x128>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b39      	ldr	r3, [pc, #228]	; (8000798 <HAL_UART_MspInit+0x128>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0289      	lsls	r1, r1, #10
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <HAL_UART_MspInit+0x128>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	029b      	lsls	r3, r3, #10
 80006c4:	4013      	ands	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	22c0      	movs	r2, #192	; 0xc0
 80006ce:	00d2      	lsls	r2, r2, #3
 80006d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2202      	movs	r2, #2
 80006d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2203      	movs	r2, #3
 80006e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2201      	movs	r2, #1
 80006ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	187a      	adds	r2, r7, r1
 80006ee:	2390      	movs	r3, #144	; 0x90
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fa99 	bl	8000c2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	201b      	movs	r0, #27
 8000700:	f000 f9e4 	bl	8000acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000704:	201b      	movs	r0, #27
 8000706:	f000 f9f6 	bl	8000af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800070a:	e03f      	b.n	800078c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a22      	ldr	r2, [pc, #136]	; (800079c <HAL_UART_MspInit+0x12c>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d13a      	bne.n	800078c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <HAL_UART_MspInit+0x128>)
 8000718:	69da      	ldr	r2, [r3, #28]
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <HAL_UART_MspInit+0x128>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	02c9      	lsls	r1, r1, #11
 8000720:	430a      	orrs	r2, r1
 8000722:	61da      	str	r2, [r3, #28]
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <HAL_UART_MspInit+0x128>)
 8000726:	69da      	ldr	r2, [r3, #28]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	02db      	lsls	r3, r3, #11
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_UART_MspInit+0x128>)
 8000734:	695a      	ldr	r2, [r3, #20]
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_UART_MspInit+0x128>)
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	02c9      	lsls	r1, r1, #11
 800073c:	430a      	orrs	r2, r1
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_UART_MspInit+0x128>)
 8000742:	695a      	ldr	r2, [r3, #20]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	02db      	lsls	r3, r3, #11
 8000748:	4013      	ands	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800074e:	211c      	movs	r1, #28
 8000750:	187b      	adds	r3, r7, r1
 8000752:	22c0      	movs	r2, #192	; 0xc0
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2202      	movs	r2, #2
 800075c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2203      	movs	r2, #3
 8000768:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2204      	movs	r2, #4
 800076e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	187b      	adds	r3, r7, r1
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <HAL_UART_MspInit+0x130>)
 8000774:	0019      	movs	r1, r3
 8000776:	0010      	movs	r0, r2
 8000778:	f000 fa58 	bl	8000c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	201d      	movs	r0, #29
 8000782:	f000 f9a3 	bl	8000acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000786:	201d      	movs	r0, #29
 8000788:	f000 f9b5 	bl	8000af6 <HAL_NVIC_EnableIRQ>
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b00d      	add	sp, #52	; 0x34
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	40013800 	.word	0x40013800
 8000798:	40021000 	.word	0x40021000
 800079c:	40004800 	.word	0x40004800
 80007a0:	48000400 	.word	0x48000400

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f894 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <USART1_IRQHandler+0x14>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f001 fa1e 	bl	8001c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000028 	.word	0x20000028

080007ec <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);(&huart3);
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <USART3_6_IRQHandler+0x14>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fa12 	bl	8001c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */
	//HAL_UART_RxCpltCallback(&huart3);
  /* USER CODE END USART3_6_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	200000b0 	.word	0x200000b0

08000804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000812:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000814:	f7ff fff6 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <LoopForever+0x6>)
  ldr r1, =_edata
 800081a:	490d      	ldr	r1, [pc, #52]	; (8000850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <LoopForever+0xe>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000830:	4c0a      	ldr	r4, [pc, #40]	; (800085c <LoopForever+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800083e:	f002 fbef 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff fceb 	bl	800021c <main>

08000846 <LoopForever>:

LoopForever:
    b LoopForever
 8000846:	e7fe      	b.n	8000846 <LoopForever>
  ldr   r0, =_estack
 8000848:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000854:	080030e0 	.word	0x080030e0
  ldr r2, =_sbss
 8000858:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800085c:	200001a0 	.word	0x200001a0

08000860 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_IRQHandler>
	...

08000864 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <HAL_Init+0x24>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_Init+0x24>)
 800086e:	2110      	movs	r1, #16
 8000870:	430a      	orrs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f809 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087a:	f7ff fed5 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_InitTick+0x5c>)
 8000896:	681c      	ldr	r4, [r3, #0]
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_InitTick+0x60>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	0019      	movs	r1, r3
 800089e:	23fa      	movs	r3, #250	; 0xfa
 80008a0:	0098      	lsls	r0, r3, #2
 80008a2:	f7ff fc2f 	bl	8000104 <__udivsi3>
 80008a6:	0003      	movs	r3, r0
 80008a8:	0019      	movs	r1, r3
 80008aa:	0020      	movs	r0, r4
 80008ac:	f7ff fc2a 	bl	8000104 <__udivsi3>
 80008b0:	0003      	movs	r3, r0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f92f 	bl	8000b16 <HAL_SYSTICK_Config>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	e00f      	b.n	80008e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d80b      	bhi.n	80008de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	2301      	movs	r3, #1
 80008ca:	425b      	negs	r3, r3
 80008cc:	2200      	movs	r2, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 f8fc 	bl	8000acc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_InitTick+0x64>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b003      	add	sp, #12
 80008e6:	bd90      	pop	{r4, r7, pc}
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000004 	.word	0x20000004

080008f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_IncTick+0x1c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	001a      	movs	r2, r3
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x20>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	18d2      	adds	r2, r2, r3
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_IncTick+0x20>)
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	20000008 	.word	0x20000008
 8000914:	2000019c 	.word	0x2000019c

08000918 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <HAL_GetTick+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	2000019c 	.word	0x2000019c

0800092c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff fff0 	bl	8000918 <HAL_GetTick>
 8000938:	0003      	movs	r3, r0
 800093a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	d005      	beq.n	8000952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_Delay+0x44>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	001a      	movs	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	189b      	adds	r3, r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	f7ff ffe0 	bl	8000918 <HAL_GetTick>
 8000958:	0002      	movs	r2, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <HAL_Delay+0x28>
  {
  }
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b004      	add	sp, #16
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	20000008 	.word	0x20000008

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b7f      	cmp	r3, #127	; 0x7f
 8000986:	d809      	bhi.n	800099c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	001a      	movs	r2, r3
 800098e:	231f      	movs	r3, #31
 8000990:	401a      	ands	r2, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_EnableIRQ+0x30>)
 8000994:	2101      	movs	r1, #1
 8000996:	4091      	lsls	r1, r2
 8000998:	000a      	movs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
  }
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b7f      	cmp	r3, #127	; 0x7f
 80009bc:	d828      	bhi.n	8000a10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009be:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <__NVIC_SetPriority+0xd4>)
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	33c0      	adds	r3, #192	; 0xc0
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	589b      	ldr	r3, [r3, r2]
 80009ce:	1dfa      	adds	r2, r7, #7
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	0011      	movs	r1, r2
 80009d4:	2203      	movs	r2, #3
 80009d6:	400a      	ands	r2, r1
 80009d8:	00d2      	lsls	r2, r2, #3
 80009da:	21ff      	movs	r1, #255	; 0xff
 80009dc:	4091      	lsls	r1, r2
 80009de:	000a      	movs	r2, r1
 80009e0:	43d2      	mvns	r2, r2
 80009e2:	401a      	ands	r2, r3
 80009e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	401a      	ands	r2, r3
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	2303      	movs	r3, #3
 80009f6:	4003      	ands	r3, r0
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	481f      	ldr	r0, [pc, #124]	; (8000a7c <__NVIC_SetPriority+0xd4>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	33c0      	adds	r3, #192	; 0xc0
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a0e:	e031      	b.n	8000a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <__NVIC_SetPriority+0xd8>)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0019      	movs	r1, r3
 8000a18:	230f      	movs	r3, #15
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	3b08      	subs	r3, #8
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3306      	adds	r3, #6
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	3304      	adds	r3, #4
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	1dfa      	adds	r2, r7, #7
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	0011      	movs	r1, r2
 8000a30:	2203      	movs	r2, #3
 8000a32:	400a      	ands	r2, r1
 8000a34:	00d2      	lsls	r2, r2, #3
 8000a36:	21ff      	movs	r1, #255	; 0xff
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	401a      	ands	r2, r3
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2303      	movs	r3, #3
 8000a52:	4003      	ands	r3, r0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <__NVIC_SetPriority+0xd8>)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	001c      	movs	r4, r3
 8000a60:	230f      	movs	r3, #15
 8000a62:	4023      	ands	r3, r4
 8000a64:	3b08      	subs	r3, #8
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	3306      	adds	r3, #6
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	18c3      	adds	r3, r0, r3
 8000a70:	3304      	adds	r3, #4
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b003      	add	sp, #12
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	045b      	lsls	r3, r3, #17
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d301      	bcc.n	8000a9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e010      	b.n	8000abe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SysTick_Config+0x44>)
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	3a01      	subs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff ff7c 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x44>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x44>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	1c02      	adds	r2, r0, #0
 8000adc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ff5d 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	0002      	movs	r2, r0
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ff33 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff ffaf 	bl	8000a84 <SysTick_Config>
 8000b26:	0003      	movs	r3, r0
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2221      	movs	r2, #33	; 0x21
 8000b3c:	5c9b      	ldrb	r3, [r3, r2]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d008      	beq.n	8000b56 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2204      	movs	r2, #4
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	2100      	movs	r1, #0
 8000b50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e020      	b.n	8000b98 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	210e      	movs	r1, #14
 8000b62:	438a      	bics	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2101      	movs	r1, #1
 8000b72:	438a      	bics	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2221      	movs	r2, #33	; 0x21
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2220      	movs	r2, #32
 8000b92:	2100      	movs	r1, #0
 8000b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba8:	210f      	movs	r1, #15
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2221      	movs	r2, #33	; 0x21
 8000bb4:	5c9b      	ldrb	r3, [r3, r2]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d006      	beq.n	8000bca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e028      	b.n	8000c1c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	210e      	movs	r1, #14
 8000bd6:	438a      	bics	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	438a      	bics	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2221      	movs	r2, #33	; 0x21
 8000bfe:	2101      	movs	r1, #1
 8000c00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2220      	movs	r2, #32
 8000c06:	2100      	movs	r1, #0
 8000c08:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	0010      	movs	r0, r2
 8000c1a:	4798      	blx	r3
    }
  }
  return status;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	781b      	ldrb	r3, [r3, #0]
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b004      	add	sp, #16
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	e14f      	b.n	8000edc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4091      	lsls	r1, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d100      	bne.n	8000c54 <HAL_GPIO_Init+0x28>
 8000c52:	e140      	b.n	8000ed6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2203      	movs	r2, #3
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d005      	beq.n	8000c6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2203      	movs	r2, #3
 8000c66:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d130      	bne.n	8000cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	43da      	mvns	r2, r3
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	091b      	lsrs	r3, r3, #4
 8000cb8:	2201      	movs	r2, #1
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d017      	beq.n	8000d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	43da      	mvns	r2, r3
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2203      	movs	r2, #3
 8000d10:	4013      	ands	r3, r2
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d123      	bne.n	8000d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	0092      	lsls	r2, r2, #2
 8000d20:	58d3      	ldr	r3, [r2, r3]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	2207      	movs	r2, #7
 8000d28:	4013      	ands	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2107      	movs	r1, #7
 8000d42:	400b      	ands	r3, r1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	6939      	ldr	r1, [r7, #16]
 8000d5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	23c0      	movs	r3, #192	; 0xc0
 8000d98:	029b      	lsls	r3, r3, #10
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d100      	bne.n	8000da0 <HAL_GPIO_Init+0x174>
 8000d9e:	e09a      	b.n	8000ed6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <HAL_GPIO_Init+0x2c8>)
 8000da2:	699a      	ldr	r2, [r3, #24]
 8000da4:	4b53      	ldr	r3, [pc, #332]	; (8000ef4 <HAL_GPIO_Init+0x2c8>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	430a      	orrs	r2, r1
 8000daa:	619a      	str	r2, [r3, #24]
 8000dac:	4b51      	ldr	r3, [pc, #324]	; (8000ef4 <HAL_GPIO_Init+0x2c8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	2201      	movs	r2, #1
 8000db2:	4013      	ands	r3, r2
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	589b      	ldr	r3, [r3, r2]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	2390      	movs	r3, #144	; 0x90
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0x1e2>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a44      	ldr	r2, [pc, #272]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00d      	beq.n	8000e0a <HAL_GPIO_Init+0x1de>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a43      	ldr	r2, [pc, #268]	; (8000f00 <HAL_GPIO_Init+0x2d4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x1da>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a42      	ldr	r2, [pc, #264]	; (8000f04 <HAL_GPIO_Init+0x2d8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_GPIO_Init+0x1d6>
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000e02:	2305      	movs	r3, #5
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	2103      	movs	r1, #3
 8000e14:	400a      	ands	r2, r1
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e20:	4935      	ldr	r1, [pc, #212]	; (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	035b      	lsls	r3, r3, #13
 8000e46:	4013      	ands	r3, r2
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	039b      	lsls	r3, r3, #14
 8000e70:	4013      	ands	r3, r2
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e7c:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	029b      	lsls	r3, r3, #10
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43da      	mvns	r2, r3
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	025b      	lsls	r3, r3, #9
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	40da      	lsrs	r2, r3
 8000ee4:	1e13      	subs	r3, r2, #0
 8000ee6:	d000      	beq.n	8000eea <HAL_GPIO_Init+0x2be>
 8000ee8:	e6a8      	b.n	8000c3c <HAL_GPIO_Init+0x10>
  } 
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b006      	add	sp, #24
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010000 	.word	0x40010000
 8000efc:	48000400 	.word	0x48000400
 8000f00:	48000800 	.word	0x48000800
 8000f04:	48000c00 	.word	0x48000c00
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	000a      	movs	r2, r1
 8000f16:	1cbb      	adds	r3, r7, #2
 8000f18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	1cba      	adds	r2, r7, #2
 8000f20:	8812      	ldrh	r2, [r2, #0]
 8000f22:	4013      	ands	r3, r2
 8000f24:	d004      	beq.n	8000f30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f26:	230f      	movs	r3, #15
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e003      	b.n	8000f38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
  }
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	0008      	movs	r0, r1
 8000f50:	0011      	movs	r1, r2
 8000f52:	1cbb      	adds	r3, r7, #2
 8000f54:	1c02      	adds	r2, r0, #0
 8000f56:	801a      	strh	r2, [r3, #0]
 8000f58:	1c7b      	adds	r3, r7, #1
 8000f5a:	1c0a      	adds	r2, r1, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f5e:	1c7b      	adds	r3, r7, #1
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f66:	1cbb      	adds	r3, r7, #2
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f6e:	e003      	b.n	8000f78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f70:	1cbb      	adds	r3, r7, #2
 8000f72:	881a      	ldrh	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e305      	b.n	800159e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2201      	movs	r2, #1
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d100      	bne.n	8000f9e <HAL_RCC_OscConfig+0x1e>
 8000f9c:	e08d      	b.n	80010ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f9e:	4bc5      	ldr	r3, [pc, #788]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d00e      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000faa:	4bc2      	ldr	r3, [pc, #776]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	220c      	movs	r2, #12
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d116      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x64>
 8000fb6:	4bbf      	ldr	r3, [pc, #764]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	23c0      	movs	r3, #192	; 0xc0
 8000fbc:	025b      	lsls	r3, r3, #9
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d10d      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	4bba      	ldr	r3, [pc, #744]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	029b      	lsls	r3, r3, #10
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d100      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x56>
 8000fd4:	e070      	b.n	80010b8 <HAL_RCC_OscConfig+0x138>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d000      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x60>
 8000fde:	e06b      	b.n	80010b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e2dc      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d107      	bne.n	8000ffc <HAL_RCC_OscConfig+0x7c>
 8000fec:	4bb1      	ldr	r3, [pc, #708]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4bb0      	ldr	r3, [pc, #704]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	0249      	lsls	r1, r1, #9
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e02f      	b.n	800105c <HAL_RCC_OscConfig+0xdc>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10c      	bne.n	800101e <HAL_RCC_OscConfig+0x9e>
 8001004:	4bab      	ldr	r3, [pc, #684]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4baa      	ldr	r3, [pc, #680]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800100a:	49ab      	ldr	r1, [pc, #684]	; (80012b8 <HAL_RCC_OscConfig+0x338>)
 800100c:	400a      	ands	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	4ba8      	ldr	r3, [pc, #672]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4ba7      	ldr	r3, [pc, #668]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001016:	49a9      	ldr	r1, [pc, #676]	; (80012bc <HAL_RCC_OscConfig+0x33c>)
 8001018:	400a      	ands	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	e01e      	b.n	800105c <HAL_RCC_OscConfig+0xdc>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d10e      	bne.n	8001044 <HAL_RCC_OscConfig+0xc4>
 8001026:	4ba3      	ldr	r3, [pc, #652]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4ba2      	ldr	r3, [pc, #648]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	02c9      	lsls	r1, r1, #11
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	4b9f      	ldr	r3, [pc, #636]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b9e      	ldr	r3, [pc, #632]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0249      	lsls	r1, r1, #9
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e00b      	b.n	800105c <HAL_RCC_OscConfig+0xdc>
 8001044:	4b9b      	ldr	r3, [pc, #620]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b9a      	ldr	r3, [pc, #616]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800104a:	499b      	ldr	r1, [pc, #620]	; (80012b8 <HAL_RCC_OscConfig+0x338>)
 800104c:	400a      	ands	r2, r1
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	4b98      	ldr	r3, [pc, #608]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b97      	ldr	r3, [pc, #604]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001056:	4999      	ldr	r1, [pc, #612]	; (80012bc <HAL_RCC_OscConfig+0x33c>)
 8001058:	400a      	ands	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d014      	beq.n	800108e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fc58 	bl	8000918 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106e:	f7ff fc53 	bl	8000918 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b64      	cmp	r3, #100	; 0x64
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e28e      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001080:	4b8c      	ldr	r3, [pc, #560]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	029b      	lsls	r3, r3, #10
 8001088:	4013      	ands	r3, r2
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0xee>
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fc43 	bl	8000918 <HAL_GetTick>
 8001092:	0003      	movs	r3, r0
 8001094:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fc3e 	bl	8000918 <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e279      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	4b82      	ldr	r3, [pc, #520]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	029b      	lsls	r3, r3, #10
 80010b2:	4013      	ands	r3, r2
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x118>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2202      	movs	r2, #2
 80010c0:	4013      	ands	r3, r2
 80010c2:	d100      	bne.n	80010c6 <HAL_RCC_OscConfig+0x146>
 80010c4:	e06c      	b.n	80011a0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010c6:	4b7b      	ldr	r3, [pc, #492]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	220c      	movs	r2, #12
 80010cc:	4013      	ands	r3, r2
 80010ce:	d00e      	beq.n	80010ee <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010d0:	4b78      	ldr	r3, [pc, #480]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	220c      	movs	r2, #12
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d11f      	bne.n	800111c <HAL_RCC_OscConfig+0x19c>
 80010dc:	4b75      	ldr	r3, [pc, #468]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	23c0      	movs	r3, #192	; 0xc0
 80010e2:	025b      	lsls	r3, r3, #9
 80010e4:	401a      	ands	r2, r3
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d116      	bne.n	800111c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b71      	ldr	r3, [pc, #452]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2202      	movs	r2, #2
 80010f4:	4013      	ands	r3, r2
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_OscConfig+0x184>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e24c      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b6b      	ldr	r3, [pc, #428]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	22f8      	movs	r2, #248	; 0xf8
 800110a:	4393      	bics	r3, r2
 800110c:	0019      	movs	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	00da      	lsls	r2, r3, #3
 8001114:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	e041      	b.n	80011a0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d024      	beq.n	800116e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001124:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b62      	ldr	r3, [pc, #392]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800112a:	2101      	movs	r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fbf2 	bl	8000918 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fbed 	bl	8000918 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e228      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2202      	movs	r2, #2
 8001152:	4013      	ands	r3, r2
 8001154:	d0f1      	beq.n	800113a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	22f8      	movs	r2, #248	; 0xf8
 800115c:	4393      	bics	r3, r2
 800115e:	0019      	movs	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	00da      	lsls	r2, r3, #3
 8001166:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e018      	b.n	80011a0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fbcd 	bl	8000918 <HAL_GetTick>
 800117e:	0003      	movs	r3, r0
 8001180:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fbc8 	bl	8000918 <HAL_GetTick>
 8001188:	0002      	movs	r2, r0
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e203      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2202      	movs	r2, #2
 800119c:	4013      	ands	r3, r2
 800119e:	d1f1      	bne.n	8001184 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2208      	movs	r2, #8
 80011a6:	4013      	ands	r3, r2
 80011a8:	d036      	beq.n	8001218 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d019      	beq.n	80011e6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80011b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80011b8:	2101      	movs	r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff fbab 	bl	8000918 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c8:	f7ff fba6 	bl	8000918 <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1e1      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	d0f1      	beq.n	80011c8 <HAL_RCC_OscConfig+0x248>
 80011e4:	e018      	b.n	8001218 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80011e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	438a      	bics	r2, r1
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb91 	bl	8000918 <HAL_GetTick>
 80011f6:	0003      	movs	r3, r0
 80011f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff fb8c 	bl	8000918 <HAL_GetTick>
 8001200:	0002      	movs	r2, r0
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1c7      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	d1f1      	bne.n	80011fc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2204      	movs	r2, #4
 800121e:	4013      	ands	r3, r2
 8001220:	d100      	bne.n	8001224 <HAL_RCC_OscConfig+0x2a4>
 8001222:	e0b5      	b.n	8001390 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001224:	201f      	movs	r0, #31
 8001226:	183b      	adds	r3, r7, r0
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800122e:	69da      	ldr	r2, [r3, #28]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	055b      	lsls	r3, r3, #21
 8001234:	4013      	ands	r3, r2
 8001236:	d110      	bne.n	800125a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800123a:	69da      	ldr	r2, [r3, #28]
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 800123e:	2180      	movs	r1, #128	; 0x80
 8001240:	0549      	lsls	r1, r1, #21
 8001242:	430a      	orrs	r2, r1
 8001244:	61da      	str	r2, [r3, #28]
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 8001248:	69da      	ldr	r2, [r3, #28]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	055b      	lsls	r3, r3, #21
 800124e:	4013      	ands	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001254:	183b      	adds	r3, r7, r0
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_RCC_OscConfig+0x340>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4013      	ands	r3, r2
 8001264:	d11a      	bne.n	800129c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_RCC_OscConfig+0x340>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_RCC_OscConfig+0x340>)
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	0049      	lsls	r1, r1, #1
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001274:	f7ff fb50 	bl	8000918 <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127e:	f7ff fb4b 	bl	8000918 <HAL_GetTick>
 8001282:	0002      	movs	r2, r0
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b64      	cmp	r3, #100	; 0x64
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e186      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_OscConfig+0x340>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4013      	ands	r3, r2
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d10f      	bne.n	80012c4 <HAL_RCC_OscConfig+0x344>
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <HAL_RCC_OscConfig+0x334>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	621a      	str	r2, [r3, #32]
 80012b0:	e036      	b.n	8001320 <HAL_RCC_OscConfig+0x3a0>
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	40021000 	.word	0x40021000
 80012b8:	fffeffff 	.word	0xfffeffff
 80012bc:	fffbffff 	.word	0xfffbffff
 80012c0:	40007000 	.word	0x40007000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10c      	bne.n	80012e6 <HAL_RCC_OscConfig+0x366>
 80012cc:	4bb6      	ldr	r3, [pc, #728]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80012ce:	6a1a      	ldr	r2, [r3, #32]
 80012d0:	4bb5      	ldr	r3, [pc, #724]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	438a      	bics	r2, r1
 80012d6:	621a      	str	r2, [r3, #32]
 80012d8:	4bb3      	ldr	r3, [pc, #716]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80012da:	6a1a      	ldr	r2, [r3, #32]
 80012dc:	4bb2      	ldr	r3, [pc, #712]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80012de:	2104      	movs	r1, #4
 80012e0:	438a      	bics	r2, r1
 80012e2:	621a      	str	r2, [r3, #32]
 80012e4:	e01c      	b.n	8001320 <HAL_RCC_OscConfig+0x3a0>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x388>
 80012ee:	4bae      	ldr	r3, [pc, #696]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	4bad      	ldr	r3, [pc, #692]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80012f4:	2104      	movs	r1, #4
 80012f6:	430a      	orrs	r2, r1
 80012f8:	621a      	str	r2, [r3, #32]
 80012fa:	4bab      	ldr	r3, [pc, #684]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	4baa      	ldr	r3, [pc, #680]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001300:	2101      	movs	r1, #1
 8001302:	430a      	orrs	r2, r1
 8001304:	621a      	str	r2, [r3, #32]
 8001306:	e00b      	b.n	8001320 <HAL_RCC_OscConfig+0x3a0>
 8001308:	4ba7      	ldr	r3, [pc, #668]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800130a:	6a1a      	ldr	r2, [r3, #32]
 800130c:	4ba6      	ldr	r3, [pc, #664]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800130e:	2101      	movs	r1, #1
 8001310:	438a      	bics	r2, r1
 8001312:	621a      	str	r2, [r3, #32]
 8001314:	4ba4      	ldr	r3, [pc, #656]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	4ba3      	ldr	r3, [pc, #652]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800131a:	2104      	movs	r1, #4
 800131c:	438a      	bics	r2, r1
 800131e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d014      	beq.n	8001352 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff faf6 	bl	8000918 <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	e009      	b.n	8001346 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff faf1 	bl	8000918 <HAL_GetTick>
 8001336:	0002      	movs	r2, r0
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	4a9b      	ldr	r2, [pc, #620]	; (80015ac <HAL_RCC_OscConfig+0x62c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e12b      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001346:	4b98      	ldr	r3, [pc, #608]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x3b2>
 8001350:	e013      	b.n	800137a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fae1 	bl	8000918 <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135a:	e009      	b.n	8001370 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135c:	f7ff fadc 	bl	8000918 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4a91      	ldr	r2, [pc, #580]	; (80015ac <HAL_RCC_OscConfig+0x62c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e116      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001370:	4b8d      	ldr	r3, [pc, #564]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	2202      	movs	r2, #2
 8001376:	4013      	ands	r3, r2
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800137a:	231f      	movs	r3, #31
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d105      	bne.n	8001390 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001384:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001386:	69da      	ldr	r2, [r3, #28]
 8001388:	4b87      	ldr	r3, [pc, #540]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800138a:	4989      	ldr	r1, [pc, #548]	; (80015b0 <HAL_RCC_OscConfig+0x630>)
 800138c:	400a      	ands	r2, r1
 800138e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2210      	movs	r2, #16
 8001396:	4013      	ands	r3, r2
 8001398:	d063      	beq.n	8001462 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d12a      	bne.n	80013f8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013a2:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80013a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a6:	4b80      	ldr	r3, [pc, #512]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80013a8:	2104      	movs	r1, #4
 80013aa:	430a      	orrs	r2, r1
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013ae:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80013b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b2:	4b7d      	ldr	r3, [pc, #500]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff faad 	bl	8000918 <HAL_GetTick>
 80013be:	0003      	movs	r3, r0
 80013c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013c4:	f7ff faa8 	bl	8000918 <HAL_GetTick>
 80013c8:	0002      	movs	r2, r0
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e0e3      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013d6:	4b74      	ldr	r3, [pc, #464]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80013d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d0f1      	beq.n	80013c4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013e0:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	22f8      	movs	r2, #248	; 0xf8
 80013e6:	4393      	bics	r3, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	00da      	lsls	r2, r3, #3
 80013f0:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80013f2:	430a      	orrs	r2, r1
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
 80013f6:	e034      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	3305      	adds	r3, #5
 80013fe:	d111      	bne.n	8001424 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001400:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001404:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001406:	2104      	movs	r1, #4
 8001408:	438a      	bics	r2, r1
 800140a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800140e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001410:	22f8      	movs	r2, #248	; 0xf8
 8001412:	4393      	bics	r3, r2
 8001414:	0019      	movs	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	00da      	lsls	r2, r3, #3
 800141c:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800141e:	430a      	orrs	r2, r1
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
 8001422:	e01e      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001424:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001428:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800142a:	2104      	movs	r1, #4
 800142c:	430a      	orrs	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001430:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001434:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001436:	2101      	movs	r1, #1
 8001438:	438a      	bics	r2, r1
 800143a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fa6c 	bl	8000918 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001446:	f7ff fa67 	bl	8000918 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e0a2      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	2202      	movs	r2, #2
 800145e:	4013      	ands	r3, r2
 8001460:	d1f1      	bne.n	8001446 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d100      	bne.n	800146c <HAL_RCC_OscConfig+0x4ec>
 800146a:	e097      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800146c:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	220c      	movs	r2, #12
 8001472:	4013      	ands	r3, r2
 8001474:	2b08      	cmp	r3, #8
 8001476:	d100      	bne.n	800147a <HAL_RCC_OscConfig+0x4fa>
 8001478:	e06b      	b.n	8001552 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d14c      	bne.n	800151c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001488:	494a      	ldr	r1, [pc, #296]	; (80015b4 <HAL_RCC_OscConfig+0x634>)
 800148a:	400a      	ands	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fa43 	bl	8000918 <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fa3e 	bl	8000918 <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e079      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	049b      	lsls	r3, r3, #18
 80014b2:	4013      	ands	r3, r2
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	220f      	movs	r2, #15
 80014bc:	4393      	bics	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a3a      	ldr	r2, [pc, #232]	; (80015b8 <HAL_RCC_OscConfig+0x638>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	431a      	orrs	r2, r3
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	0449      	lsls	r1, r1, #17
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fa11 	bl	8000918 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fa0c 	bl	8000918 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e047      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	049b      	lsls	r3, r3, #18
 8001516:	4013      	ands	r3, r2
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x57c>
 800151a:	e03f      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001522:	4924      	ldr	r1, [pc, #144]	; (80015b4 <HAL_RCC_OscConfig+0x634>)
 8001524:	400a      	ands	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff f9f6 	bl	8000918 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff f9f1 	bl	8000918 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e02c      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	049b      	lsls	r3, r3, #18
 800154c:	4013      	ands	r3, r2
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x5b2>
 8001550:	e024      	b.n	800159c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e01f      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x628>)
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	23c0      	movs	r3, #192	; 0xc0
 800156e:	025b      	lsls	r3, r3, #9
 8001570:	401a      	ands	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	429a      	cmp	r2, r3
 8001578:	d10e      	bne.n	8001598 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	220f      	movs	r2, #15
 800157e:	401a      	ands	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d107      	bne.n	8001598 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	23f0      	movs	r3, #240	; 0xf0
 800158c:	039b      	lsls	r3, r3, #14
 800158e:	401a      	ands	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b008      	add	sp, #32
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40021000 	.word	0x40021000
 80015ac:	00001388 	.word	0x00001388
 80015b0:	efffffff 	.word	0xefffffff
 80015b4:	feffffff 	.word	0xfeffffff
 80015b8:	ffc27fff 	.word	0xffc27fff

080015bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b3      	b.n	8001738 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d0:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <HAL_RCC_ClockConfig+0x184>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2201      	movs	r2, #1
 80015d6:	4013      	ands	r3, r2
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d911      	bls.n	8001602 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_RCC_ClockConfig+0x184>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4393      	bics	r3, r2
 80015e6:	0019      	movs	r1, r3
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <HAL_RCC_ClockConfig+0x184>)
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_RCC_ClockConfig+0x184>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e09a      	b.n	8001738 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	d015      	beq.n	8001638 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2204      	movs	r2, #4
 8001612:	4013      	ands	r3, r2
 8001614:	d006      	beq.n	8001624 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001616:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 800161c:	21e0      	movs	r1, #224	; 0xe0
 800161e:	00c9      	lsls	r1, r1, #3
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	22f0      	movs	r2, #240	; 0xf0
 800162a:	4393      	bics	r3, r2
 800162c:	0019      	movs	r1, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	4b44      	ldr	r3, [pc, #272]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001634:	430a      	orrs	r2, r1
 8001636:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2201      	movs	r2, #1
 800163e:	4013      	ands	r3, r2
 8001640:	d040      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	029b      	lsls	r3, r3, #10
 8001652:	4013      	ands	r3, r2
 8001654:	d114      	bne.n	8001680 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06e      	b.n	8001738 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	049b      	lsls	r3, r3, #18
 800166a:	4013      	ands	r3, r2
 800166c:	d108      	bne.n	8001680 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e062      	b.n	8001738 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b34      	ldr	r3, [pc, #208]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e05b      	b.n	8001738 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	4393      	bics	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001690:	430a      	orrs	r2, r1
 8001692:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff f940 	bl	8000918 <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169c:	e009      	b.n	80016b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169e:	f7ff f93b 	bl	8000918 <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <HAL_RCC_ClockConfig+0x18c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e042      	b.n	8001738 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	220c      	movs	r2, #12
 80016b8:	401a      	ands	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1ec      	bne.n	800169e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_RCC_ClockConfig+0x184>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d211      	bcs.n	80016f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_ClockConfig+0x184>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2201      	movs	r2, #1
 80016d8:	4393      	bics	r3, r2
 80016da:	0019      	movs	r1, r3
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_RCC_ClockConfig+0x184>)
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_RCC_ClockConfig+0x184>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4013      	ands	r3, r2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e020      	b.n	8001738 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2204      	movs	r2, #4
 80016fc:	4013      	ands	r3, r2
 80016fe:	d009      	beq.n	8001714 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_RCC_ClockConfig+0x190>)
 8001706:	4013      	ands	r3, r2
 8001708:	0019      	movs	r1, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 8001710:	430a      	orrs	r2, r1
 8001712:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001714:	f000 f820 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001718:	0001      	movs	r1, r0
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_RCC_ClockConfig+0x188>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	220f      	movs	r2, #15
 8001722:	4013      	ands	r3, r2
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x194>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	000a      	movs	r2, r1
 800172a:	40da      	lsrs	r2, r3
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x198>)
 800172e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001730:	2003      	movs	r0, #3
 8001732:	f7ff f8ab 	bl	800088c <HAL_InitTick>
  
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	b004      	add	sp, #16
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40022000 	.word	0x40022000
 8001744:	40021000 	.word	0x40021000
 8001748:	00001388 	.word	0x00001388
 800174c:	fffff8ff 	.word	0xfffff8ff
 8001750:	080030a0 	.word	0x080030a0
 8001754:	20000000 	.word	0x20000000

08001758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	220c      	movs	r2, #12
 800177c:	4013      	ands	r3, r2
 800177e:	2b04      	cmp	r3, #4
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x30>
 8001782:	2b08      	cmp	r3, #8
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x36>
 8001786:	e02e      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_RCC_GetSysClockFreq+0xa4>)
 800178a:	613b      	str	r3, [r7, #16]
      break;
 800178c:	e02e      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	220f      	movs	r2, #15
 8001794:	4013      	ands	r3, r2
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	220f      	movs	r2, #15
 80017a2:	4013      	ands	r3, r2
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_RCC_GetSysClockFreq+0xac>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	23c0      	movs	r3, #192	; 0xc0
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	401a      	ands	r2, r3
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017ba:	68b9      	ldr	r1, [r7, #8]
 80017bc:	480f      	ldr	r0, [pc, #60]	; (80017fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80017be:	f7fe fca1 	bl	8000104 <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	001a      	movs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4353      	muls	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	480a      	ldr	r0, [pc, #40]	; (80017fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80017d2:	f7fe fc97 	bl	8000104 <__udivsi3>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4353      	muls	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	613b      	str	r3, [r7, #16]
      break;
 80017e4:	e002      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80017e8:	613b      	str	r3, [r7, #16]
      break;
 80017ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017ec:	693b      	ldr	r3, [r7, #16]
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b006      	add	sp, #24
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	40021000 	.word	0x40021000
 80017fc:	007a1200 	.word	0x007a1200
 8001800:	080030b8 	.word	0x080030b8
 8001804:	080030c8 	.word	0x080030c8

08001808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800180c:	4b02      	ldr	r3, [pc, #8]	; (8001818 <HAL_RCC_GetHCLKFreq+0x10>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	20000000 	.word	0x20000000

0800181c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001820:	f7ff fff2 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 8001824:	0001      	movs	r1, r0
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	2207      	movs	r2, #7
 800182e:	4013      	ands	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	40d9      	lsrs	r1, r3
 8001836:	000b      	movs	r3, r1
}    
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000
 8001844:	080030b0 	.word	0x080030b0

08001848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	025b      	lsls	r3, r3, #9
 8001860:	4013      	ands	r3, r2
 8001862:	d100      	bne.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001864:	e08e      	b.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2017      	movs	r0, #23
 8001868:	183b      	adds	r3, r7, r0
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186e:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	055b      	lsls	r3, r3, #21
 8001876:	4013      	ands	r3, r2
 8001878:	d110      	bne.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b54      	ldr	r3, [pc, #336]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0549      	lsls	r1, r1, #21
 8001884:	430a      	orrs	r2, r1
 8001886:	61da      	str	r2, [r3, #28]
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800188a:	69da      	ldr	r2, [r3, #28]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	055b      	lsls	r3, r3, #21
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001896:	183b      	adds	r3, r7, r0
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	d11a      	bne.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a8:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	0049      	lsls	r1, r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b6:	f7ff f82f 	bl	8000918 <HAL_GetTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	e008      	b.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff f82a 	bl	8000918 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e077      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e0:	6a1a      	ldr	r2, [r3, #32]
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d034      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	23c0      	movs	r3, #192	; 0xc0
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d02c      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0249      	lsls	r1, r1, #9
 8001914:	430a      	orrs	r2, r1
 8001916:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001918:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800191e:	492e      	ldr	r1, [pc, #184]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001920:	400a      	ands	r2, r1
 8001922:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	4013      	ands	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7fe fff1 	bl	8000918 <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	e009      	b.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7fe ffec 	bl	8000918 <HAL_GetTick>
 8001940:	0002      	movs	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	4a25      	ldr	r2, [pc, #148]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e038      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	2202      	movs	r2, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d0f0      	beq.n	800193c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001960:	4013      	ands	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800196a:	430a      	orrs	r2, r1
 800196c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800196e:	2317      	movs	r3, #23
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800197e:	4918      	ldr	r1, [pc, #96]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001980:	400a      	ands	r2, r1
 8001982:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	4013      	ands	r3, r2
 800198c:	d009      	beq.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	2203      	movs	r2, #3
 8001994:	4393      	bics	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800199e:	430a      	orrs	r2, r1
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2220      	movs	r2, #32
 80019a8:	4013      	ands	r3, r2
 80019aa:	d009      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	2210      	movs	r2, #16
 80019b2:	4393      	bics	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019bc:	430a      	orrs	r2, r1
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b006      	add	sp, #24
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40007000 	.word	0x40007000
 80019d4:	fffffcff 	.word	0xfffffcff
 80019d8:	fffeffff 	.word	0xfffeffff
 80019dc:	00001388 	.word	0x00001388
 80019e0:	efffffff 	.word	0xefffffff

080019e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e044      	b.n	8001a80 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d107      	bne.n	8001a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2278      	movs	r2, #120	; 0x78
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7fe fe31 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2224      	movs	r2, #36	; 0x24
 8001a12:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	438a      	bics	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 fbdc 	bl	80021e4 <UART_SetConfig>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e024      	b.n	8001a80 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 fd3f 	bl	80024c4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	490d      	ldr	r1, [pc, #52]	; (8001a88 <HAL_UART_Init+0xa4>)
 8001a52:	400a      	ands	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2108      	movs	r1, #8
 8001a62:	438a      	bics	r2, r1
 8001a64:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 fdd7 	bl	800262c <UART_CheckIdleState>
 8001a7e:	0003      	movs	r3, r0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	fffff7ff 	.word	0xfffff7ff

08001a8c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	1dbb      	adds	r3, r7, #6
 8001a98:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d15b      	bne.n	8001b5a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_UART_Transmit_IT+0x24>
 8001aa8:	1dbb      	adds	r3, r7, #6
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e053      	b.n	8001b5c <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d109      	bne.n	8001ad4 <HAL_UART_Transmit_IT+0x48>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e043      	b.n	8001b5c <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1dba      	adds	r2, r7, #6
 8001ade:	2150      	movs	r1, #80	; 0x50
 8001ae0:	8812      	ldrh	r2, [r2, #0]
 8001ae2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1dba      	adds	r2, r7, #6
 8001ae8:	2152      	movs	r1, #82	; 0x52
 8001aea:	8812      	ldrh	r2, [r2, #0]
 8001aec:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2284      	movs	r2, #132	; 0x84
 8001af8:	2100      	movs	r1, #0
 8001afa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2221      	movs	r2, #33	; 0x21
 8001b00:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	015b      	lsls	r3, r3, #5
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d107      	bne.n	8001b1e <HAL_UART_Transmit_IT+0x92>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_UART_Transmit_IT+0xd8>)
 8001b1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b1c:	e002      	b.n	8001b24 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_UART_Transmit_IT+0xdc>)
 8001b22:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b24:	f3ef 8310 	mrs	r3, PRIMASK
 8001b28:	613b      	str	r3, [r7, #16]
  return(result);
 8001b2a:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f383 8810 	msr	PRIMASK, r3
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f383 8810 	msr	PRIMASK, r3
}
 8001b54:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001b5a:	2302      	movs	r3, #2
  }
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b008      	add	sp, #32
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	08002b8f 	.word	0x08002b8f
 8001b68:	08002adb 	.word	0x08002adb

08001b6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	1dbb      	adds	r3, r7, #6
 8001b78:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	589b      	ldr	r3, [r3, r2]
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d145      	bne.n	8001c10 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_UART_Receive_IT+0x26>
 8001b8a:	1dbb      	adds	r3, r7, #6
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e03d      	b.n	8001c12 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	015b      	lsls	r3, r3, #5
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d109      	bne.n	8001bb6 <HAL_UART_Receive_IT+0x4a>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d001      	beq.n	8001bb6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e02d      	b.n	8001c12 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bca:	f3ef 8310 	mrs	r3, PRIMASK
 8001bce:	613b      	str	r3, [r7, #16]
  return(result);
 8001bd0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f383 8810 	msr	PRIMASK, r3
}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	04c9      	lsls	r1, r1, #19
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f383 8810 	msr	PRIMASK, r3
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001bfe:	1dbb      	adds	r3, r7, #6
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 fe22 	bl	8002850 <UART_Start_Receive_IT>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	e000      	b.n	8001c12 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001c10:	2302      	movs	r3, #2
  }
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b008      	add	sp, #32
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b0ab      	sub	sp, #172	; 0xac
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	22a4      	movs	r2, #164	; 0xa4
 8001c2c:	18b9      	adds	r1, r7, r2
 8001c2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	20a0      	movs	r0, #160	; 0xa0
 8001c38:	1839      	adds	r1, r7, r0
 8001c3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	219c      	movs	r1, #156	; 0x9c
 8001c44:	1879      	adds	r1, r7, r1
 8001c46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001c48:	0011      	movs	r1, r2
 8001c4a:	18bb      	adds	r3, r7, r2
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a99      	ldr	r2, [pc, #612]	; (8001eb4 <HAL_UART_IRQHandler+0x298>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	2298      	movs	r2, #152	; 0x98
 8001c54:	18bc      	adds	r4, r7, r2
 8001c56:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001c58:	18bb      	adds	r3, r7, r2
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d114      	bne.n	8001c8a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2220      	movs	r2, #32
 8001c66:	4013      	ands	r3, r2
 8001c68:	d00f      	beq.n	8001c8a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	4013      	ands	r3, r2
 8001c72:	d00a      	beq.n	8001c8a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d100      	bne.n	8001c7e <HAL_UART_IRQHandler+0x62>
 8001c7c:	e286      	b.n	800218c <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	0010      	movs	r0, r2
 8001c86:	4798      	blx	r3
      }
      return;
 8001c88:	e280      	b.n	800218c <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001c8a:	2398      	movs	r3, #152	; 0x98
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d100      	bne.n	8001c96 <HAL_UART_IRQHandler+0x7a>
 8001c94:	e114      	b.n	8001ec0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c96:	239c      	movs	r3, #156	; 0x9c
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d106      	bne.n	8001cb0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001ca2:	23a0      	movs	r3, #160	; 0xa0
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a83      	ldr	r2, [pc, #524]	; (8001eb8 <HAL_UART_IRQHandler+0x29c>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	d100      	bne.n	8001cb0 <HAL_UART_IRQHandler+0x94>
 8001cae:	e107      	b.n	8001ec0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001cb0:	23a4      	movs	r3, #164	; 0xa4
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d012      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xc6>
 8001cbc:	23a0      	movs	r3, #160	; 0xa0
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2284      	movs	r2, #132	; 0x84
 8001cd6:	589b      	ldr	r3, [r3, r2]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2184      	movs	r1, #132	; 0x84
 8001ce0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ce2:	23a4      	movs	r3, #164	; 0xa4
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d011      	beq.n	8001d12 <HAL_UART_IRQHandler+0xf6>
 8001cee:	239c      	movs	r3, #156	; 0x9c
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d00b      	beq.n	8001d12 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2284      	movs	r2, #132	; 0x84
 8001d06:	589b      	ldr	r3, [r3, r2]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2184      	movs	r1, #132	; 0x84
 8001d10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d12:	23a4      	movs	r3, #164	; 0xa4
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d011      	beq.n	8001d42 <HAL_UART_IRQHandler+0x126>
 8001d1e:	239c      	movs	r3, #156	; 0x9c
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	4013      	ands	r3, r2
 8001d28:	d00b      	beq.n	8001d42 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2284      	movs	r2, #132	; 0x84
 8001d36:	589b      	ldr	r3, [r3, r2]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2184      	movs	r1, #132	; 0x84
 8001d40:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d42:	23a4      	movs	r3, #164	; 0xa4
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d017      	beq.n	8001d7e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d4e:	23a0      	movs	r3, #160	; 0xa0
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2220      	movs	r2, #32
 8001d56:	4013      	ands	r3, r2
 8001d58:	d105      	bne.n	8001d66 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001d5a:	239c      	movs	r3, #156	; 0x9c
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d64:	d00b      	beq.n	8001d7e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2284      	movs	r2, #132	; 0x84
 8001d72:	589b      	ldr	r3, [r3, r2]
 8001d74:	2208      	movs	r2, #8
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2184      	movs	r1, #132	; 0x84
 8001d7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001d7e:	23a4      	movs	r3, #164	; 0xa4
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_UART_IRQHandler+0x198>
 8001d8c:	23a0      	movs	r3, #160	; 0xa0
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	04db      	lsls	r3, r3, #19
 8001d96:	4013      	ands	r3, r2
 8001d98:	d00c      	beq.n	8001db4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2284      	movs	r2, #132	; 0x84
 8001da8:	589b      	ldr	r3, [r3, r2]
 8001daa:	2220      	movs	r2, #32
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2184      	movs	r1, #132	; 0x84
 8001db2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2284      	movs	r2, #132	; 0x84
 8001db8:	589b      	ldr	r3, [r3, r2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d100      	bne.n	8001dc0 <HAL_UART_IRQHandler+0x1a4>
 8001dbe:	e1e7      	b.n	8002190 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001dc0:	23a4      	movs	r3, #164	; 0xa4
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d00e      	beq.n	8001dea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001dcc:	23a0      	movs	r3, #160	; 0xa0
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d008      	beq.n	8001dea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	0010      	movs	r0, r2
 8001de8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2284      	movs	r2, #132	; 0x84
 8001dee:	589b      	ldr	r3, [r3, r2]
 8001df0:	2194      	movs	r1, #148	; 0x94
 8001df2:	187a      	adds	r2, r7, r1
 8001df4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d004      	beq.n	8001e0e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2228      	movs	r2, #40	; 0x28
 8001e0a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e0c:	d047      	beq.n	8001e9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 fde7 	bl	80029e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	d137      	bne.n	8001e94 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e24:	f3ef 8310 	mrs	r3, PRIMASK
 8001e28:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e2c:	2090      	movs	r0, #144	; 0x90
 8001e2e:	183a      	adds	r2, r7, r0
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e38:	f383 8810 	msr	PRIMASK, r3
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	438a      	bics	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	183b      	adds	r3, r7, r0
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e56:	f383 8810 	msr	PRIMASK, r3
}
 8001e5a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d012      	beq.n	8001e8a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_UART_IRQHandler+0x2a0>)
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7fe fe95 	bl	8000ba0 <HAL_DMA_Abort_IT>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d01a      	beq.n	8001eb0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	0018      	movs	r0, r3
 8001e86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e88:	e012      	b.n	8001eb0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f995 	bl	80021bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e92:	e00d      	b.n	8001eb0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 f990 	bl	80021bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e9c:	e008      	b.n	8001eb0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 f98b 	bl	80021bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2284      	movs	r2, #132	; 0x84
 8001eaa:	2100      	movs	r1, #0
 8001eac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001eae:	e16f      	b.n	8002190 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb0:	46c0      	nop			; (mov r8, r8)
    return;
 8001eb2:	e16d      	b.n	8002190 <HAL_UART_IRQHandler+0x574>
 8001eb4:	0000080f 	.word	0x0000080f
 8001eb8:	04000120 	.word	0x04000120
 8001ebc:	08002aad 	.word	0x08002aad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d000      	beq.n	8001eca <HAL_UART_IRQHandler+0x2ae>
 8001ec8:	e139      	b.n	800213e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001eca:	23a4      	movs	r3, #164	; 0xa4
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_UART_IRQHandler+0x2bc>
 8001ed6:	e132      	b.n	800213e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001ed8:	23a0      	movs	r3, #160	; 0xa0
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2210      	movs	r2, #16
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x2ca>
 8001ee4:	e12b      	b.n	800213e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2210      	movs	r2, #16
 8001eec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d000      	beq.n	8001efe <HAL_UART_IRQHandler+0x2e2>
 8001efc:	e09f      	b.n	800203e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	217e      	movs	r1, #126	; 0x7e
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d100      	bne.n	8001f16 <HAL_UART_IRQHandler+0x2fa>
 8001f14:	e13e      	b.n	8002194 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2258      	movs	r2, #88	; 0x58
 8001f1a:	5a9b      	ldrh	r3, [r3, r2]
 8001f1c:	187a      	adds	r2, r7, r1
 8001f1e:	8812      	ldrh	r2, [r2, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d300      	bcc.n	8001f26 <HAL_UART_IRQHandler+0x30a>
 8001f24:	e136      	b.n	8002194 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	187a      	adds	r2, r7, r1
 8001f2a:	215a      	movs	r1, #90	; 0x5a
 8001f2c:	8812      	ldrh	r2, [r2, #0]
 8001f2e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d06f      	beq.n	800201a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f42:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f44:	2301      	movs	r3, #1
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	f383 8810 	msr	PRIMASK, r3
}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4992      	ldr	r1, [pc, #584]	; (80021a4 <HAL_UART_IRQHandler+0x588>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f66:	f383 8810 	msr	PRIMASK, r3
}
 8001f6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f74:	677b      	str	r3, [r7, #116]	; 0x74
 8001f76:	2301      	movs	r3, #1
 8001f78:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7c:	f383 8810 	msr	PRIMASK, r3
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	438a      	bics	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f98:	f383 8810 	msr	PRIMASK, r3
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8001fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8001fa8:	2301      	movs	r3, #1
 8001faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fae:	f383 8810 	msr	PRIMASK, r3
}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2140      	movs	r1, #64	; 0x40
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fca:	f383 8810 	msr	PRIMASK, r3
}
 8001fce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fde:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fe8:	2301      	movs	r3, #1
 8001fea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fee:	f383 8810 	msr	PRIMASK, r3
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2110      	movs	r1, #16
 8002000:	438a      	bics	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002006:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200a:	f383 8810 	msr	PRIMASK, r3
}
 800200e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe fd8b 	bl	8000b30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2202      	movs	r2, #2
 800201e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2258      	movs	r2, #88	; 0x58
 8002024:	5a9a      	ldrh	r2, [r3, r2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	215a      	movs	r1, #90	; 0x5a
 800202a:	5a5b      	ldrh	r3, [r3, r1]
 800202c:	b29b      	uxth	r3, r3
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0011      	movs	r1, r2
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f8c8 	bl	80021cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800203c:	e0aa      	b.n	8002194 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2258      	movs	r2, #88	; 0x58
 8002042:	5a99      	ldrh	r1, [r3, r2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	225a      	movs	r2, #90	; 0x5a
 8002048:	5a9b      	ldrh	r3, [r3, r2]
 800204a:	b29a      	uxth	r2, r3
 800204c:	208e      	movs	r0, #142	; 0x8e
 800204e:	183b      	adds	r3, r7, r0
 8002050:	1a8a      	subs	r2, r1, r2
 8002052:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	225a      	movs	r2, #90	; 0x5a
 8002058:	5a9b      	ldrh	r3, [r3, r2]
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d100      	bne.n	8002062 <HAL_UART_IRQHandler+0x446>
 8002060:	e09a      	b.n	8002198 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002062:	183b      	adds	r3, r7, r0
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d100      	bne.n	800206c <HAL_UART_IRQHandler+0x450>
 800206a:	e095      	b.n	8002198 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800206c:	f3ef 8310 	mrs	r3, PRIMASK
 8002070:	60fb      	str	r3, [r7, #12]
  return(result);
 8002072:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002074:	2488      	movs	r4, #136	; 0x88
 8002076:	193a      	adds	r2, r7, r4
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	2301      	movs	r3, #1
 800207c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f383 8810 	msr	PRIMASK, r3
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4945      	ldr	r1, [pc, #276]	; (80021a8 <HAL_UART_IRQHandler+0x58c>)
 8002092:	400a      	ands	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	193b      	adds	r3, r7, r4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f383 8810 	msr	PRIMASK, r3
}
 80020a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a4:	f3ef 8310 	mrs	r3, PRIMASK
 80020a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80020aa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ac:	2484      	movs	r4, #132	; 0x84
 80020ae:	193a      	adds	r2, r7, r4
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	2301      	movs	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f383 8810 	msr	PRIMASK, r3
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	438a      	bics	r2, r1
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	f383 8810 	msr	PRIMASK, r3
}
 80020da:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	2120      	movs	r1, #32
 80020e2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f0:	f3ef 8310 	mrs	r3, PRIMASK
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020f8:	2480      	movs	r4, #128	; 0x80
 80020fa:	193a      	adds	r2, r7, r4
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	2301      	movs	r3, #1
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	f383 8810 	msr	PRIMASK, r3
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2110      	movs	r1, #16
 8002116:	438a      	bics	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	193b      	adds	r3, r7, r4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	f383 8810 	msr	PRIMASK, r3
}
 8002126:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800212e:	183b      	adds	r3, r7, r0
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f000 f848 	bl	80021cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800213c:	e02c      	b.n	8002198 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800213e:	23a4      	movs	r3, #164	; 0xa4
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	4013      	ands	r3, r2
 8002148:	d00f      	beq.n	800216a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800214a:	23a0      	movs	r3, #160	; 0xa0
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	4013      	ands	r3, r2
 8002154:	d009      	beq.n	800216a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01e      	beq.n	800219c <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	0010      	movs	r0, r2
 8002166:	4798      	blx	r3
    }
    return;
 8002168:	e018      	b.n	800219c <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800216a:	23a4      	movs	r3, #164	; 0xa4
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	4013      	ands	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_UART_IRQHandler+0x582>
 8002176:	23a0      	movs	r3, #160	; 0xa0
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2240      	movs	r2, #64	; 0x40
 800217e:	4013      	ands	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 fd60 	bl	8002c4a <UART_EndTransmit_IT>
    return;
 800218a:	e008      	b.n	800219e <HAL_UART_IRQHandler+0x582>
      return;
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	e006      	b.n	800219e <HAL_UART_IRQHandler+0x582>
    return;
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	e004      	b.n	800219e <HAL_UART_IRQHandler+0x582>
      return;
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	e002      	b.n	800219e <HAL_UART_IRQHandler+0x582>
      return;
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	e000      	b.n	800219e <HAL_UART_IRQHandler+0x582>
    return;
 800219c:	46c0      	nop			; (mov r8, r8)
  }

}
 800219e:	46bd      	mov	sp, r7
 80021a0:	b02b      	add	sp, #172	; 0xac
 80021a2:	bd90      	pop	{r4, r7, pc}
 80021a4:	fffffeff 	.word	0xfffffeff
 80021a8:	fffffedf 	.word	0xfffffedf

080021ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	000a      	movs	r2, r1
 80021d6:	1cbb      	adds	r3, r7, #2
 80021d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021ec:	231e      	movs	r3, #30
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4aa1      	ldr	r2, [pc, #644]	; (8002498 <UART_SetConfig+0x2b4>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a9c      	ldr	r2, [pc, #624]	; (800249c <UART_SetConfig+0x2b8>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a93      	ldr	r2, [pc, #588]	; (80024a0 <UART_SetConfig+0x2bc>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	430a      	orrs	r2, r1
 800225e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a8f      	ldr	r2, [pc, #572]	; (80024a4 <UART_SetConfig+0x2c0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d127      	bne.n	80022ba <UART_SetConfig+0xd6>
 800226a:	4b8f      	ldr	r3, [pc, #572]	; (80024a8 <UART_SetConfig+0x2c4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	2203      	movs	r2, #3
 8002270:	4013      	ands	r3, r2
 8002272:	2b03      	cmp	r3, #3
 8002274:	d00d      	beq.n	8002292 <UART_SetConfig+0xae>
 8002276:	d81b      	bhi.n	80022b0 <UART_SetConfig+0xcc>
 8002278:	2b02      	cmp	r3, #2
 800227a:	d014      	beq.n	80022a6 <UART_SetConfig+0xc2>
 800227c:	d818      	bhi.n	80022b0 <UART_SetConfig+0xcc>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <UART_SetConfig+0xa4>
 8002282:	2b01      	cmp	r3, #1
 8002284:	d00a      	beq.n	800229c <UART_SetConfig+0xb8>
 8002286:	e013      	b.n	80022b0 <UART_SetConfig+0xcc>
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e049      	b.n	8002326 <UART_SetConfig+0x142>
 8002292:	231f      	movs	r3, #31
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e044      	b.n	8002326 <UART_SetConfig+0x142>
 800229c:	231f      	movs	r3, #31
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2204      	movs	r2, #4
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e03f      	b.n	8002326 <UART_SetConfig+0x142>
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2208      	movs	r2, #8
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e03a      	b.n	8002326 <UART_SetConfig+0x142>
 80022b0:	231f      	movs	r3, #31
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2210      	movs	r2, #16
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e035      	b.n	8002326 <UART_SetConfig+0x142>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7b      	ldr	r2, [pc, #492]	; (80024ac <UART_SetConfig+0x2c8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d104      	bne.n	80022ce <UART_SetConfig+0xea>
 80022c4:	231f      	movs	r3, #31
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e02b      	b.n	8002326 <UART_SetConfig+0x142>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a77      	ldr	r2, [pc, #476]	; (80024b0 <UART_SetConfig+0x2cc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d104      	bne.n	80022e2 <UART_SetConfig+0xfe>
 80022d8:	231f      	movs	r3, #31
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e021      	b.n	8002326 <UART_SetConfig+0x142>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a73      	ldr	r2, [pc, #460]	; (80024b4 <UART_SetConfig+0x2d0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d104      	bne.n	80022f6 <UART_SetConfig+0x112>
 80022ec:	231f      	movs	r3, #31
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e017      	b.n	8002326 <UART_SetConfig+0x142>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6f      	ldr	r2, [pc, #444]	; (80024b8 <UART_SetConfig+0x2d4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d104      	bne.n	800230a <UART_SetConfig+0x126>
 8002300:	231f      	movs	r3, #31
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e00d      	b.n	8002326 <UART_SetConfig+0x142>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a6b      	ldr	r2, [pc, #428]	; (80024bc <UART_SetConfig+0x2d8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d104      	bne.n	800231e <UART_SetConfig+0x13a>
 8002314:	231f      	movs	r3, #31
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e003      	b.n	8002326 <UART_SetConfig+0x142>
 800231e:	231f      	movs	r3, #31
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	2210      	movs	r2, #16
 8002324:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	429a      	cmp	r2, r3
 8002330:	d15c      	bne.n	80023ec <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8002332:	231f      	movs	r3, #31
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d015      	beq.n	8002368 <UART_SetConfig+0x184>
 800233c:	dc18      	bgt.n	8002370 <UART_SetConfig+0x18c>
 800233e:	2b04      	cmp	r3, #4
 8002340:	d00d      	beq.n	800235e <UART_SetConfig+0x17a>
 8002342:	dc15      	bgt.n	8002370 <UART_SetConfig+0x18c>
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <UART_SetConfig+0x16a>
 8002348:	2b02      	cmp	r3, #2
 800234a:	d005      	beq.n	8002358 <UART_SetConfig+0x174>
 800234c:	e010      	b.n	8002370 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800234e:	f7ff fa65 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 8002352:	0003      	movs	r3, r0
 8002354:	61bb      	str	r3, [r7, #24]
        break;
 8002356:	e012      	b.n	800237e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <UART_SetConfig+0x2dc>)
 800235a:	61bb      	str	r3, [r7, #24]
        break;
 800235c:	e00f      	b.n	800237e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800235e:	f7ff f9fb 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8002362:	0003      	movs	r3, r0
 8002364:	61bb      	str	r3, [r7, #24]
        break;
 8002366:	e00a      	b.n	800237e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	61bb      	str	r3, [r7, #24]
        break;
 800236e:	e006      	b.n	800237e <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002374:	231e      	movs	r3, #30
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
        break;
 800237c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d100      	bne.n	8002386 <UART_SetConfig+0x1a2>
 8002384:	e07a      	b.n	800247c <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	005a      	lsls	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	18d2      	adds	r2, r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0019      	movs	r1, r3
 8002398:	0010      	movs	r0, r2
 800239a:	f7fd feb3 	bl	8000104 <__udivsi3>
 800239e:	0003      	movs	r3, r0
 80023a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b0f      	cmp	r3, #15
 80023a6:	d91c      	bls.n	80023e2 <UART_SetConfig+0x1fe>
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	025b      	lsls	r3, r3, #9
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d217      	bcs.n	80023e2 <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	200e      	movs	r0, #14
 80023b8:	183b      	adds	r3, r7, r0
 80023ba:	210f      	movs	r1, #15
 80023bc:	438a      	bics	r2, r1
 80023be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2207      	movs	r2, #7
 80023c8:	4013      	ands	r3, r2
 80023ca:	b299      	uxth	r1, r3
 80023cc:	183b      	adds	r3, r7, r0
 80023ce:	183a      	adds	r2, r7, r0
 80023d0:	8812      	ldrh	r2, [r2, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	183a      	adds	r2, r7, r0
 80023dc:	8812      	ldrh	r2, [r2, #0]
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	e04c      	b.n	800247c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 80023e2:	231e      	movs	r3, #30
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e047      	b.n	800247c <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023ec:	231f      	movs	r3, #31
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d015      	beq.n	8002422 <UART_SetConfig+0x23e>
 80023f6:	dc18      	bgt.n	800242a <UART_SetConfig+0x246>
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00d      	beq.n	8002418 <UART_SetConfig+0x234>
 80023fc:	dc15      	bgt.n	800242a <UART_SetConfig+0x246>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <UART_SetConfig+0x224>
 8002402:	2b02      	cmp	r3, #2
 8002404:	d005      	beq.n	8002412 <UART_SetConfig+0x22e>
 8002406:	e010      	b.n	800242a <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002408:	f7ff fa08 	bl	800181c <HAL_RCC_GetPCLK1Freq>
 800240c:	0003      	movs	r3, r0
 800240e:	61bb      	str	r3, [r7, #24]
        break;
 8002410:	e012      	b.n	8002438 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002412:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <UART_SetConfig+0x2dc>)
 8002414:	61bb      	str	r3, [r7, #24]
        break;
 8002416:	e00f      	b.n	8002438 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002418:	f7ff f99e 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 800241c:	0003      	movs	r3, r0
 800241e:	61bb      	str	r3, [r7, #24]
        break;
 8002420:	e00a      	b.n	8002438 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	61bb      	str	r3, [r7, #24]
        break;
 8002428:	e006      	b.n	8002438 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800242e:	231e      	movs	r3, #30
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
        break;
 8002436:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01e      	beq.n	800247c <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	085a      	lsrs	r2, r3, #1
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	18d2      	adds	r2, r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	0019      	movs	r1, r3
 800244e:	0010      	movs	r0, r2
 8002450:	f7fd fe58 	bl	8000104 <__udivsi3>
 8002454:	0003      	movs	r3, r0
 8002456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	d90a      	bls.n	8002474 <UART_SetConfig+0x290>
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	025b      	lsls	r3, r3, #9
 8002464:	429a      	cmp	r2, r3
 8002466:	d205      	bcs.n	8002474 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	b29a      	uxth	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	e003      	b.n	800247c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002474:	231e      	movs	r3, #30
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002488:	231e      	movs	r3, #30
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b008      	add	sp, #32
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	efff69f3 	.word	0xefff69f3
 800249c:	ffffcfff 	.word	0xffffcfff
 80024a0:	fffff4ff 	.word	0xfffff4ff
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40004400 	.word	0x40004400
 80024b0:	40004800 	.word	0x40004800
 80024b4:	40004c00 	.word	0x40004c00
 80024b8:	40005000 	.word	0x40005000
 80024bc:	40011400 	.word	0x40011400
 80024c0:	007a1200 	.word	0x007a1200

080024c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	d00b      	beq.n	80024ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a4a      	ldr	r2, [pc, #296]	; (8002608 <UART_AdvFeatureConfig+0x144>)
 80024de:	4013      	ands	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	2202      	movs	r2, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d00b      	beq.n	8002510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a43      	ldr	r2, [pc, #268]	; (800260c <UART_AdvFeatureConfig+0x148>)
 8002500:	4013      	ands	r3, r2
 8002502:	0019      	movs	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	2204      	movs	r2, #4
 8002516:	4013      	ands	r3, r2
 8002518:	d00b      	beq.n	8002532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a3b      	ldr	r2, [pc, #236]	; (8002610 <UART_AdvFeatureConfig+0x14c>)
 8002522:	4013      	ands	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2208      	movs	r2, #8
 8002538:	4013      	ands	r3, r2
 800253a:	d00b      	beq.n	8002554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4a34      	ldr	r2, [pc, #208]	; (8002614 <UART_AdvFeatureConfig+0x150>)
 8002544:	4013      	ands	r3, r2
 8002546:	0019      	movs	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	2210      	movs	r2, #16
 800255a:	4013      	ands	r3, r2
 800255c:	d00b      	beq.n	8002576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a2c      	ldr	r2, [pc, #176]	; (8002618 <UART_AdvFeatureConfig+0x154>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	2220      	movs	r2, #32
 800257c:	4013      	ands	r3, r2
 800257e:	d00b      	beq.n	8002598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4a25      	ldr	r2, [pc, #148]	; (800261c <UART_AdvFeatureConfig+0x158>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	4013      	ands	r3, r2
 80025a0:	d01d      	beq.n	80025de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <UART_AdvFeatureConfig+0x15c>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	035b      	lsls	r3, r3, #13
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d10b      	bne.n	80025de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a15      	ldr	r2, [pc, #84]	; (8002624 <UART_AdvFeatureConfig+0x160>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	4013      	ands	r3, r2
 80025e6:	d00b      	beq.n	8002600 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <UART_AdvFeatureConfig+0x164>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
  }
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b002      	add	sp, #8
 8002606:	bd80      	pop	{r7, pc}
 8002608:	fffdffff 	.word	0xfffdffff
 800260c:	fffeffff 	.word	0xfffeffff
 8002610:	fffbffff 	.word	0xfffbffff
 8002614:	ffff7fff 	.word	0xffff7fff
 8002618:	ffffefff 	.word	0xffffefff
 800261c:	ffffdfff 	.word	0xffffdfff
 8002620:	ffefffff 	.word	0xffefffff
 8002624:	ff9fffff 	.word	0xff9fffff
 8002628:	fff7ffff 	.word	0xfff7ffff

0800262c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b092      	sub	sp, #72	; 0x48
 8002630:	af02      	add	r7, sp, #8
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2284      	movs	r2, #132	; 0x84
 8002638:	2100      	movs	r1, #0
 800263a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800263c:	f7fe f96c 	bl	8000918 <HAL_GetTick>
 8002640:	0003      	movs	r3, r0
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2208      	movs	r2, #8
 800264c:	4013      	ands	r3, r2
 800264e:	2b08      	cmp	r3, #8
 8002650:	d12c      	bne.n	80026ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	0391      	lsls	r1, r2, #14
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4a46      	ldr	r2, [pc, #280]	; (8002774 <UART_CheckIdleState+0x148>)
 800265c:	9200      	str	r2, [sp, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	f000 f88c 	bl	800277c <UART_WaitOnFlagUntilTimeout>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d021      	beq.n	80026ac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002668:	f3ef 8310 	mrs	r3, PRIMASK
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
 8002672:	2301      	movs	r3, #1
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	f383 8810 	msr	PRIMASK, r3
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	438a      	bics	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	f383 8810 	msr	PRIMASK, r3
}
 8002698:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2278      	movs	r2, #120	; 0x78
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e05f      	b.n	800276c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2204      	movs	r2, #4
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d146      	bne.n	8002748 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	03d1      	lsls	r1, r2, #15
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <UART_CheckIdleState+0x148>)
 80026c4:	9200      	str	r2, [sp, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f000 f858 	bl	800277c <UART_WaitOnFlagUntilTimeout>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d03b      	beq.n	8002748 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d0:	f3ef 8310 	mrs	r3, PRIMASK
 80026d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80026d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
 80026da:	2301      	movs	r3, #1
 80026dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f383 8810 	msr	PRIMASK, r3
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4921      	ldr	r1, [pc, #132]	; (8002778 <UART_CheckIdleState+0x14c>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f383 8810 	msr	PRIMASK, r3
}
 8002700:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002702:	f3ef 8310 	mrs	r3, PRIMASK
 8002706:	61bb      	str	r3, [r7, #24]
  return(result);
 8002708:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
 800270c:	2301      	movs	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f383 8810 	msr	PRIMASK, r3
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2101      	movs	r1, #1
 8002724:	438a      	bics	r2, r1
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f383 8810 	msr	PRIMASK, r3
}
 8002732:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	2120      	movs	r1, #32
 800273a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2278      	movs	r2, #120	; 0x78
 8002740:	2100      	movs	r1, #0
 8002742:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e011      	b.n	800276c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	2120      	movs	r1, #32
 8002754:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2278      	movs	r2, #120	; 0x78
 8002766:	2100      	movs	r1, #0
 8002768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b010      	add	sp, #64	; 0x40
 8002772:	bd80      	pop	{r7, pc}
 8002774:	01ffffff 	.word	0x01ffffff
 8002778:	fffffedf 	.word	0xfffffedf

0800277c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	1dfb      	adds	r3, r7, #7
 800278a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278c:	e04b      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	3301      	adds	r3, #1
 8002792:	d048      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7fe f8c0 	bl	8000918 <HAL_GetTick>
 8002798:	0002      	movs	r2, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e04b      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2204      	movs	r2, #4
 80027b6:	4013      	ands	r3, r2
 80027b8:	d035      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2208      	movs	r2, #8
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d111      	bne.n	80027ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f906 	bl	80029e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2284      	movs	r2, #132	; 0x84
 80027dc:	2108      	movs	r1, #8
 80027de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2278      	movs	r2, #120	; 0x78
 80027e4:	2100      	movs	r1, #0
 80027e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e02c      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	401a      	ands	r2, r3
 80027f8:	2380      	movs	r3, #128	; 0x80
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d112      	bne.n	8002826 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 f8e9 	bl	80029e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2284      	movs	r2, #132	; 0x84
 8002816:	2120      	movs	r1, #32
 8002818:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2278      	movs	r2, #120	; 0x78
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e00f      	b.n	8002846 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	425a      	negs	r2, r3
 8002836:	4153      	adcs	r3, r2
 8002838:	b2db      	uxtb	r3, r3
 800283a:	001a      	movs	r2, r3
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d0a4      	beq.n	800278e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b090      	sub	sp, #64	; 0x40
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	1dbb      	adds	r3, r7, #6
 800285c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1dba      	adds	r2, r7, #6
 8002868:	2158      	movs	r1, #88	; 0x58
 800286a:	8812      	ldrh	r2, [r2, #0]
 800286c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1dba      	adds	r2, r7, #6
 8002872:	215a      	movs	r1, #90	; 0x5a
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	015b      	lsls	r3, r3, #5
 8002886:	429a      	cmp	r2, r3
 8002888:	d10d      	bne.n	80028a6 <UART_Start_Receive_IT+0x56>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <UART_Start_Receive_IT+0x4c>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	225c      	movs	r2, #92	; 0x5c
 8002896:	4950      	ldr	r1, [pc, #320]	; (80029d8 <UART_Start_Receive_IT+0x188>)
 8002898:	5299      	strh	r1, [r3, r2]
 800289a:	e02e      	b.n	80028fa <UART_Start_Receive_IT+0xaa>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	225c      	movs	r2, #92	; 0x5c
 80028a0:	21ff      	movs	r1, #255	; 0xff
 80028a2:	5299      	strh	r1, [r3, r2]
 80028a4:	e029      	b.n	80028fa <UART_Start_Receive_IT+0xaa>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10d      	bne.n	80028ca <UART_Start_Receive_IT+0x7a>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d104      	bne.n	80028c0 <UART_Start_Receive_IT+0x70>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	225c      	movs	r2, #92	; 0x5c
 80028ba:	21ff      	movs	r1, #255	; 0xff
 80028bc:	5299      	strh	r1, [r3, r2]
 80028be:	e01c      	b.n	80028fa <UART_Start_Receive_IT+0xaa>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	225c      	movs	r2, #92	; 0x5c
 80028c4:	217f      	movs	r1, #127	; 0x7f
 80028c6:	5299      	strh	r1, [r3, r2]
 80028c8:	e017      	b.n	80028fa <UART_Start_Receive_IT+0xaa>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	055b      	lsls	r3, r3, #21
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10d      	bne.n	80028f2 <UART_Start_Receive_IT+0xa2>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <UART_Start_Receive_IT+0x98>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	225c      	movs	r2, #92	; 0x5c
 80028e2:	217f      	movs	r1, #127	; 0x7f
 80028e4:	5299      	strh	r1, [r3, r2]
 80028e6:	e008      	b.n	80028fa <UART_Start_Receive_IT+0xaa>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	225c      	movs	r2, #92	; 0x5c
 80028ec:	213f      	movs	r1, #63	; 0x3f
 80028ee:	5299      	strh	r1, [r3, r2]
 80028f0:	e003      	b.n	80028fa <UART_Start_Receive_IT+0xaa>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	225c      	movs	r2, #92	; 0x5c
 80028f6:	2100      	movs	r1, #0
 80028f8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2284      	movs	r2, #132	; 0x84
 80028fe:	2100      	movs	r1, #0
 8002900:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	2122      	movs	r1, #34	; 0x22
 8002908:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290a:	f3ef 8310 	mrs	r3, PRIMASK
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002914:	2301      	movs	r3, #1
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	f383 8810 	msr	PRIMASK, r3
}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2101      	movs	r1, #1
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002932:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	f383 8810 	msr	PRIMASK, r3
}
 800293a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	429a      	cmp	r2, r3
 8002946:	d107      	bne.n	8002958 <UART_Start_Receive_IT+0x108>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a22      	ldr	r2, [pc, #136]	; (80029dc <UART_Start_Receive_IT+0x18c>)
 8002954:	669a      	str	r2, [r3, #104]	; 0x68
 8002956:	e002      	b.n	800295e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <UART_Start_Receive_IT+0x190>)
 800295c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d019      	beq.n	800299a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002966:	f3ef 8310 	mrs	r3, PRIMASK
 800296a:	61fb      	str	r3, [r7, #28]
  return(result);
 800296c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
 8002970:	2301      	movs	r3, #1
 8002972:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f383 8810 	msr	PRIMASK, r3
}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2190      	movs	r1, #144	; 0x90
 8002988:	0049      	lsls	r1, r1, #1
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	e018      	b.n	80029cc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800299a:	f3ef 8310 	mrs	r3, PRIMASK
 800299e:	613b      	str	r3, [r7, #16]
  return(result);
 80029a0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80029a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029a4:	2301      	movs	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f383 8810 	msr	PRIMASK, r3
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2120      	movs	r1, #32
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f383 8810 	msr	PRIMASK, r3
}
 80029ca:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b010      	add	sp, #64	; 0x40
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	000001ff 	.word	0x000001ff
 80029dc:	08002e59 	.word	0x08002e59
 80029e0:	08002ca1 	.word	0x08002ca1

080029e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08e      	sub	sp, #56	; 0x38
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ec:	f3ef 8310 	mrs	r3, PRIMASK
 80029f0:	617b      	str	r3, [r7, #20]
  return(result);
 80029f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
 80029f6:	2301      	movs	r3, #1
 80029f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f383 8810 	msr	PRIMASK, r3
}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4926      	ldr	r1, [pc, #152]	; (8002aa8 <UART_EndRxTransfer+0xc4>)
 8002a0e:	400a      	ands	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f383 8810 	msr	PRIMASK, r3
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a22:	623b      	str	r3, [r7, #32]
  return(result);
 8002a24:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
 8002a28:	2301      	movs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	f383 8810 	msr	PRIMASK, r3
}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2101      	movs	r1, #1
 8002a40:	438a      	bics	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	f383 8810 	msr	PRIMASK, r3
}
 8002a4e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d118      	bne.n	8002a8a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a58:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a62:	2301      	movs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2110      	movs	r1, #16
 8002a7a:	438a      	bics	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f383 8810 	msr	PRIMASK, r3
}
 8002a88:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	2120      	movs	r1, #32
 8002a90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b00e      	add	sp, #56	; 0x38
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	fffffedf 	.word	0xfffffedf

08002aac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	225a      	movs	r2, #90	; 0x5a
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2252      	movs	r2, #82	; 0x52
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff fb75 	bl	80021bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b004      	add	sp, #16
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b08a      	sub	sp, #40	; 0x28
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	2b21      	cmp	r3, #33	; 0x21
 8002ae8:	d14d      	bne.n	8002b86 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2252      	movs	r2, #82	; 0x52
 8002aee:	5a9b      	ldrh	r3, [r3, r2]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d132      	bne.n	8002b5c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af6:	f3ef 8310 	mrs	r3, PRIMASK
 8002afa:	60bb      	str	r3, [r7, #8]
  return(result);
 8002afc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	2301      	movs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f383 8810 	msr	PRIMASK, r3
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	438a      	bics	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b28:	f3ef 8310 	mrs	r3, PRIMASK
 8002b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8002b2e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	2301      	movs	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f383 8810 	msr	PRIMASK, r3
}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002b5a:	e014      	b.n	8002b86 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b292      	uxth	r2, r2
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2252      	movs	r2, #82	; 0x52
 8002b78:	5a9b      	ldrh	r3, [r3, r2]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b299      	uxth	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2252      	movs	r2, #82	; 0x52
 8002b84:	5299      	strh	r1, [r3, r2]
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b00a      	add	sp, #40	; 0x28
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b08c      	sub	sp, #48	; 0x30
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9a:	2b21      	cmp	r3, #33	; 0x21
 8002b9c:	d151      	bne.n	8002c42 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2252      	movs	r2, #82	; 0x52
 8002ba2:	5a9b      	ldrh	r3, [r3, r2]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d132      	bne.n	8002c10 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002baa:	f3ef 8310 	mrs	r3, PRIMASK
 8002bae:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f383 8810 	msr	PRIMASK, r3
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	438a      	bics	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f383 8810 	msr	PRIMASK, r3
}
 8002bda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8002be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002be2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	2301      	movs	r3, #1
 8002be8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f383 8810 	msr	PRIMASK, r3
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2140      	movs	r1, #64	; 0x40
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f383 8810 	msr	PRIMASK, r3
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002c0e:	e018      	b.n	8002c42 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	881a      	ldrh	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	05d2      	lsls	r2, r2, #23
 8002c20:	0dd2      	lsrs	r2, r2, #23
 8002c22:	b292      	uxth	r2, r2
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	1c9a      	adds	r2, r3, #2
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2252      	movs	r2, #82	; 0x52
 8002c34:	5a9b      	ldrh	r3, [r3, r2]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b299      	uxth	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2252      	movs	r2, #82	; 0x52
 8002c40:	5299      	strh	r1, [r3, r2]
}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b00c      	add	sp, #48	; 0x30
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c52:	f3ef 8310 	mrs	r3, PRIMASK
 8002c56:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c58:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f383 8810 	msr	PRIMASK, r3
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2140      	movs	r1, #64	; 0x40
 8002c74:	438a      	bics	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f383 8810 	msr	PRIMASK, r3
}
 8002c82:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff fa8a 	bl	80021ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b094      	sub	sp, #80	; 0x50
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002ca8:	204e      	movs	r0, #78	; 0x4e
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	215c      	movs	r1, #92	; 0x5c
 8002cb0:	5a52      	ldrh	r2, [r2, r1]
 8002cb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	589b      	ldr	r3, [r3, r2]
 8002cba:	2b22      	cmp	r3, #34	; 0x22
 8002cbc:	d000      	beq.n	8002cc0 <UART_RxISR_8BIT+0x20>
 8002cbe:	e0ba      	b.n	8002e36 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	214c      	movs	r1, #76	; 0x4c
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002cca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b2d9      	uxtb	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	400a      	ands	r2, r1
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	225a      	movs	r2, #90	; 0x5a
 8002cf0:	5a9b      	ldrh	r3, [r3, r2]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b299      	uxth	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	225a      	movs	r2, #90	; 0x5a
 8002cfc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	225a      	movs	r2, #90	; 0x5a
 8002d02:	5a9b      	ldrh	r3, [r3, r2]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d000      	beq.n	8002d0c <UART_RxISR_8BIT+0x6c>
 8002d0a:	e09c      	b.n	8002e46 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d16:	2301      	movs	r3, #1
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4948      	ldr	r1, [pc, #288]	; (8002e50 <UART_RxISR_8BIT+0x1b0>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	f383 8810 	msr	PRIMASK, r3
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	647b      	str	r3, [r7, #68]	; 0x44
 8002d48:	2301      	movs	r3, #1
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	438a      	bics	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	f383 8810 	msr	PRIMASK, r3
}
 8002d6e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	2120      	movs	r1, #32
 8002d76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d92:	f3ef 8310 	mrs	r3, PRIMASK
 8002d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d98:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4928      	ldr	r1, [pc, #160]	; (8002e54 <UART_RxISR_8BIT+0x1b4>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f383 8810 	msr	PRIMASK, r3
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d12f      	bne.n	8002e2c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dd8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ddc:	2301      	movs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2110      	movs	r1, #16
 8002df4:	438a      	bics	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f383 8810 	msr	PRIMASK, r3
}
 8002e02:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d103      	bne.n	8002e1a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2210      	movs	r2, #16
 8002e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2258      	movs	r2, #88	; 0x58
 8002e1e:	5a9a      	ldrh	r2, [r3, r2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff f9d1 	bl	80021cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e2a:	e00c      	b.n	8002e46 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd faa4 	bl	800037c <HAL_UART_RxCpltCallback>
}
 8002e34:	e007      	b.n	8002e46 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2108      	movs	r1, #8
 8002e42:	430a      	orrs	r2, r1
 8002e44:	619a      	str	r2, [r3, #24]
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b014      	add	sp, #80	; 0x50
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	fffffedf 	.word	0xfffffedf
 8002e54:	fbffffff 	.word	0xfbffffff

08002e58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b094      	sub	sp, #80	; 0x50
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002e60:	204e      	movs	r0, #78	; 0x4e
 8002e62:	183b      	adds	r3, r7, r0
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	215c      	movs	r1, #92	; 0x5c
 8002e68:	5a52      	ldrh	r2, [r2, r1]
 8002e6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	589b      	ldr	r3, [r3, r2]
 8002e72:	2b22      	cmp	r3, #34	; 0x22
 8002e74:	d000      	beq.n	8002e78 <UART_RxISR_16BIT+0x20>
 8002e76:	e0ba      	b.n	8002fee <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	214c      	movs	r1, #76	; 0x4c
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002e82:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	183a      	adds	r2, r7, r0
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	8812      	ldrh	r2, [r2, #0]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	1c9a      	adds	r2, r3, #2
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	225a      	movs	r2, #90	; 0x5a
 8002ea8:	5a9b      	ldrh	r3, [r3, r2]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b299      	uxth	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	225a      	movs	r2, #90	; 0x5a
 8002eb4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	225a      	movs	r2, #90	; 0x5a
 8002eba:	5a9b      	ldrh	r3, [r3, r2]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d000      	beq.n	8002ec4 <UART_RxISR_16BIT+0x6c>
 8002ec2:	e09c      	b.n	8002ffe <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	623b      	str	r3, [r7, #32]
  return(result);
 8002eca:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8002ece:	2301      	movs	r3, #1
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4948      	ldr	r1, [pc, #288]	; (8003008 <UART_RxISR_16BIT+0x1b0>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	643b      	str	r3, [r7, #64]	; 0x40
 8002f00:	2301      	movs	r3, #1
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	f383 8810 	msr	PRIMASK, r3
}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	438a      	bics	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f22:	f383 8810 	msr	PRIMASK, r3
}
 8002f26:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	2120      	movs	r1, #32
 8002f2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	4013      	ands	r3, r2
 8002f48:	d018      	beq.n	8002f7c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	617b      	str	r3, [r7, #20]
  return(result);
 8002f50:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f54:	2301      	movs	r3, #1
 8002f56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4928      	ldr	r1, [pc, #160]	; (800300c <UART_RxISR_16BIT+0x1b4>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d12f      	bne.n	8002fe4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f90:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f94:	2301      	movs	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f383 8810 	msr	PRIMASK, r3
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2110      	movs	r1, #16
 8002fac:	438a      	bics	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f383 8810 	msr	PRIMASK, r3
}
 8002fba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d103      	bne.n	8002fd2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2258      	movs	r2, #88	; 0x58
 8002fd6:	5a9a      	ldrh	r2, [r3, r2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff f8f5 	bl	80021cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002fe2:	e00c      	b.n	8002ffe <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7fd f9c8 	bl	800037c <HAL_UART_RxCpltCallback>
}
 8002fec:	e007      	b.n	8002ffe <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2108      	movs	r1, #8
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b014      	add	sp, #80	; 0x50
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	fffffedf 	.word	0xfffffedf
 800300c:	fbffffff 	.word	0xfbffffff

08003010 <memset>:
 8003010:	0003      	movs	r3, r0
 8003012:	1882      	adds	r2, r0, r2
 8003014:	4293      	cmp	r3, r2
 8003016:	d100      	bne.n	800301a <memset+0xa>
 8003018:	4770      	bx	lr
 800301a:	7019      	strb	r1, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	e7f9      	b.n	8003014 <memset+0x4>

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2600      	movs	r6, #0
 8003024:	4c0c      	ldr	r4, [pc, #48]	; (8003058 <__libc_init_array+0x38>)
 8003026:	4d0d      	ldr	r5, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	42a6      	cmp	r6, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	2600      	movs	r6, #0
 8003032:	f000 f819 	bl	8003068 <_init>
 8003036:	4c0a      	ldr	r4, [pc, #40]	; (8003060 <__libc_init_array+0x40>)
 8003038:	4d0a      	ldr	r5, [pc, #40]	; (8003064 <__libc_init_array+0x44>)
 800303a:	1b64      	subs	r4, r4, r5
 800303c:	10a4      	asrs	r4, r4, #2
 800303e:	42a6      	cmp	r6, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	00b3      	lsls	r3, r6, #2
 8003046:	58eb      	ldr	r3, [r5, r3]
 8003048:	4798      	blx	r3
 800304a:	3601      	adds	r6, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	00b3      	lsls	r3, r6, #2
 8003050:	58eb      	ldr	r3, [r5, r3]
 8003052:	4798      	blx	r3
 8003054:	3601      	adds	r6, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	080030d8 	.word	0x080030d8
 800305c:	080030d8 	.word	0x080030d8
 8003060:	080030dc 	.word	0x080030dc
 8003064:	080030d8 	.word	0x080030d8

08003068 <_init>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr

08003074 <_fini>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr
